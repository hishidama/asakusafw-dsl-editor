/*
* generated by Xtext
*/
grammar InternalBatchDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package jp.hishidama.xtext.afw.batch_dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package jp.hishidama.xtext.afw.batch_dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import jp.hishidama.xtext.afw.batch_dsl.services.BatchDslGrammarAccess;

}

@parser::members {
 
 	private BatchDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(BatchDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleScript
entryRuleScript 
:
{ before(grammarAccess.getScriptRule()); }
	 ruleScript
{ after(grammarAccess.getScriptRule()); } 
	 EOF 
;

// Rule Script
ruleScript
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getScriptAccess().getGroup()); }
(rule__Script__Group__0)
{ after(grammarAccess.getScriptAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackageDeclare
entryRulePackageDeclare 
:
{ before(grammarAccess.getPackageDeclareRule()); }
	 rulePackageDeclare
{ after(grammarAccess.getPackageDeclareRule()); } 
	 EOF 
;

// Rule PackageDeclare
rulePackageDeclare
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageDeclareAccess().getGroup()); }
(rule__PackageDeclare__Group__0)
{ after(grammarAccess.getPackageDeclareAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImportDeclare
entryRuleImportDeclare 
:
{ before(grammarAccess.getImportDeclareRule()); }
	 ruleImportDeclare
{ after(grammarAccess.getImportDeclareRule()); } 
	 EOF 
;

// Rule ImportDeclare
ruleImportDeclare
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportDeclareAccess().getGroup()); }
(rule__ImportDeclare__Group__0)
{ after(grammarAccess.getImportDeclareAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBatchDsl
entryRuleBatchDsl 
:
{ before(grammarAccess.getBatchDslRule()); }
	 ruleBatchDsl
{ after(grammarAccess.getBatchDslRule()); } 
	 EOF 
;

// Rule BatchDsl
ruleBatchDsl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBatchDslAccess().getGroup()); }
(rule__BatchDsl__Group__0)
{ after(grammarAccess.getBatchDslAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBatchParameter
entryRuleBatchParameter 
:
{ before(grammarAccess.getBatchParameterRule()); }
	 ruleBatchParameter
{ after(grammarAccess.getBatchParameterRule()); } 
	 EOF 
;

// Rule BatchParameter
ruleBatchParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBatchParameterAccess().getGroup()); }
(rule__BatchParameter__Group__0)
{ after(grammarAccess.getBatchParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBatchStatement
entryRuleBatchStatement 
:
{ before(grammarAccess.getBatchStatementRule()); }
	 ruleBatchStatement
{ after(grammarAccess.getBatchStatementRule()); } 
	 EOF 
;

// Rule BatchStatement
ruleBatchStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBatchStatementAccess().getGroup()); }
(rule__BatchStatement__Group__0)
{ after(grammarAccess.getBatchStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFQN
entryRuleFQN 
:
{ before(grammarAccess.getFQNRule()); }
	 ruleFQN
{ after(grammarAccess.getFQNRule()); } 
	 EOF 
;

// Rule FQN
ruleFQN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFQNAccess().getGroup()); }
(rule__FQN__Group__0)
{ after(grammarAccess.getFQNAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleName
entryRuleName 
:
{ before(grammarAccess.getNameRule()); }
	 ruleName
{ after(grammarAccess.getNameRule()); } 
	 EOF 
;

// Rule Name
ruleName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNameAccess().getAlternatives()); }
(rule__Name__Alternatives)
{ after(grammarAccess.getNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__BatchStatement__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getNameAssignment_1_0()); }
(rule__BatchStatement__NameAssignment_1_0)
{ after(grammarAccess.getBatchStatementAccess().getNameAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getBatchStatementAccess().getGroup_1_1()); }
(rule__BatchStatement__Group_1_1__0)
{ after(grammarAccess.getBatchStatementAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getSoonAssignment_2_0()); }
(rule__BatchStatement__SoonAssignment_2_0)
{ after(grammarAccess.getBatchStatementAccess().getSoonAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getBatchStatementAccess().getGroup_2_1()); }
(rule__BatchStatement__Group_2_1__0)
{ after(grammarAccess.getBatchStatementAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getSemicolonKeyword_3_0()); }

	';' 

{ after(grammarAccess.getBatchStatementAccess().getSemicolonKeyword_3_0()); }
)

    |(
{ before(grammarAccess.getBatchStatementAccess().getFullStopKeyword_3_1()); }

	'.' 

{ after(grammarAccess.getBatchStatementAccess().getFullStopKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getNameAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNameAccess().getBatchKeyword_1()); }

	'batch' 

{ after(grammarAccess.getNameAccess().getBatchKeyword_1()); }
)

    |(
{ before(grammarAccess.getNameAccess().getKeyKeyword_2()); }

	'key' 

{ after(grammarAccess.getNameAccess().getKeyKeyword_2()); }
)

    |(
{ before(grammarAccess.getNameAccess().getPatternKeyword_3()); }

	'pattern' 

{ after(grammarAccess.getNameAccess().getPatternKeyword_3()); }
)

    |(
{ before(grammarAccess.getNameAccess().getRequiredKeyword_4()); }

	'required' 

{ after(grammarAccess.getNameAccess().getRequiredKeyword_4()); }
)

    |(
{ before(grammarAccess.getNameAccess().getRunKeyword_5()); }

	'run' 

{ after(grammarAccess.getNameAccess().getRunKeyword_5()); }
)

    |(
{ before(grammarAccess.getNameAccess().getAsKeyword_6()); }

	'as' 

{ after(grammarAccess.getNameAccess().getAsKeyword_6()); }
)

    |(
{ before(grammarAccess.getNameAccess().getSoonKeyword_7()); }

	'soon' 

{ after(grammarAccess.getNameAccess().getSoonKeyword_7()); }
)

    |(
{ before(grammarAccess.getNameAccess().getAfterKeyword_8()); }

	'after' 

{ after(grammarAccess.getNameAccess().getAfterKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Script__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group__0__Impl
	rule__Script__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getPackageAssignment_0()); }
(rule__Script__PackageAssignment_0)
{ after(grammarAccess.getScriptAccess().getPackageAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group__1__Impl
	rule__Script__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getImportsAssignment_1()); }
(rule__Script__ImportsAssignment_1)*
{ after(grammarAccess.getScriptAccess().getImportsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getListAssignment_2()); }
(rule__Script__ListAssignment_2)*
{ after(grammarAccess.getScriptAccess().getListAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PackageDeclare__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclare__Group__0__Impl
	rule__PackageDeclare__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclare__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclareAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getPackageDeclareAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclare__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclare__Group__1__Impl
	rule__PackageDeclare__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclare__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclareAccess().getNameAssignment_1()); }
(rule__PackageDeclare__NameAssignment_1)
{ after(grammarAccess.getPackageDeclareAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclare__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclare__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclare__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclareAccess().getSemicolonKeyword_2()); }
(
	';' 
)?
{ after(grammarAccess.getPackageDeclareAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ImportDeclare__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportDeclare__Group__0__Impl
	rule__ImportDeclare__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclare__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclareAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportDeclareAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportDeclare__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportDeclare__Group__1__Impl
	rule__ImportDeclare__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclare__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclareAccess().getNameAssignment_1()); }
(rule__ImportDeclare__NameAssignment_1)
{ after(grammarAccess.getImportDeclareAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportDeclare__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportDeclare__Group__2__Impl
	rule__ImportDeclare__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclare__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclareAccess().getGroup_2()); }
(rule__ImportDeclare__Group_2__0)?
{ after(grammarAccess.getImportDeclareAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportDeclare__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportDeclare__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclare__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclareAccess().getSemicolonKeyword_3()); }
(
	';' 
)?
{ after(grammarAccess.getImportDeclareAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ImportDeclare__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportDeclare__Group_2__0__Impl
	rule__ImportDeclare__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclare__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclareAccess().getFullStopKeyword_2_0()); }

	'.' 

{ after(grammarAccess.getImportDeclareAccess().getFullStopKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportDeclare__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportDeclare__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclare__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclareAccess().getWildcardAssignment_2_1()); }
(rule__ImportDeclare__WildcardAssignment_2_1)
{ after(grammarAccess.getImportDeclareAccess().getWildcardAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BatchDsl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchDsl__Group__0__Impl
	rule__BatchDsl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchDsl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchDslAccess().getCommentAssignment_0()); }
(rule__BatchDsl__CommentAssignment_0)?
{ after(grammarAccess.getBatchDslAccess().getCommentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchDsl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchDsl__Group__1__Impl
	rule__BatchDsl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchDsl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchDslAccess().getParamsAssignment_1()); }
(rule__BatchDsl__ParamsAssignment_1)*
{ after(grammarAccess.getBatchDslAccess().getParamsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchDsl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchDsl__Group__2__Impl
	rule__BatchDsl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchDsl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchDslAccess().getBatchKeyword_2()); }

	'batch' 

{ after(grammarAccess.getBatchDslAccess().getBatchKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchDsl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchDsl__Group__3__Impl
	rule__BatchDsl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchDsl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchDslAccess().getNameAssignment_3()); }
(rule__BatchDsl__NameAssignment_3)
{ after(grammarAccess.getBatchDslAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchDsl__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchDsl__Group__4__Impl
	rule__BatchDsl__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchDsl__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchDslAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getBatchDslAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchDsl__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchDsl__Group__5__Impl
	rule__BatchDsl__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchDsl__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchDslAccess().getStatementsAssignment_5()); }
(rule__BatchDsl__StatementsAssignment_5)*
{ after(grammarAccess.getBatchDslAccess().getStatementsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchDsl__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchDsl__Group__6__Impl
	rule__BatchDsl__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchDsl__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchDslAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getBatchDslAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchDsl__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchDsl__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchDsl__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchDslAccess().getSemicolonKeyword_7()); }
(
	';' 
)?
{ after(grammarAccess.getBatchDslAccess().getSemicolonKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__BatchParameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchParameter__Group__0__Impl
	rule__BatchParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getParamKeyword_0()); }

	'@param' 

{ after(grammarAccess.getBatchParameterAccess().getParamKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchParameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchParameter__Group__1__Impl
	rule__BatchParameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getBatchParameterAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchParameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchParameter__Group__2__Impl
	rule__BatchParameter__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getCommentAssignment_2()); }
(rule__BatchParameter__CommentAssignment_2)?
{ after(grammarAccess.getBatchParameterAccess().getCommentAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchParameter__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchParameter__Group__3__Impl
	rule__BatchParameter__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getGroup_3()); }
(rule__BatchParameter__Group_3__0)?
{ after(grammarAccess.getBatchParameterAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchParameter__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchParameter__Group__4__Impl
	rule__BatchParameter__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getNameAssignment_4()); }
(rule__BatchParameter__NameAssignment_4)
{ after(grammarAccess.getBatchParameterAccess().getNameAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchParameter__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchParameter__Group__5__Impl
	rule__BatchParameter__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getGroup_5()); }
(rule__BatchParameter__Group_5__0)?
{ after(grammarAccess.getBatchParameterAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchParameter__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchParameter__Group__6__Impl
	rule__BatchParameter__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getGroup_6()); }
(rule__BatchParameter__Group_6__0)?
{ after(grammarAccess.getBatchParameterAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchParameter__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchParameter__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getRightParenthesisKeyword_7()); }

	')' 

{ after(grammarAccess.getBatchParameterAccess().getRightParenthesisKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__BatchParameter__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchParameter__Group_3__0__Impl
	rule__BatchParameter__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getKeyKeyword_3_0()); }

	'key' 

{ after(grammarAccess.getBatchParameterAccess().getKeyKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchParameter__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchParameter__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getEqualsSignKeyword_3_1()); }

	'=' 

{ after(grammarAccess.getBatchParameterAccess().getEqualsSignKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BatchParameter__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchParameter__Group_5__0__Impl
	rule__BatchParameter__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getCommaKeyword_5_0()); }
(
	',' 
)?
{ after(grammarAccess.getBatchParameterAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchParameter__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchParameter__Group_5__1__Impl
	rule__BatchParameter__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getPatternKeyword_5_1()); }

	'pattern' 

{ after(grammarAccess.getBatchParameterAccess().getPatternKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchParameter__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchParameter__Group_5__2__Impl
	rule__BatchParameter__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getEqualsSignKeyword_5_2()); }

	'=' 

{ after(grammarAccess.getBatchParameterAccess().getEqualsSignKeyword_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchParameter__Group_5__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchParameter__Group_5__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__Group_5__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getPatternAssignment_5_3()); }
(rule__BatchParameter__PatternAssignment_5_3)
{ after(grammarAccess.getBatchParameterAccess().getPatternAssignment_5_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BatchParameter__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchParameter__Group_6__0__Impl
	rule__BatchParameter__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getCommaKeyword_6_0()); }
(
	',' 
)?
{ after(grammarAccess.getBatchParameterAccess().getCommaKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchParameter__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchParameter__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getRequiredAssignment_6_1()); }
(rule__BatchParameter__RequiredAssignment_6_1)
{ after(grammarAccess.getBatchParameterAccess().getRequiredAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BatchStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchStatement__Group__0__Impl
	rule__BatchStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getRunKeyword_0()); }

	'run' 

{ after(grammarAccess.getBatchStatementAccess().getRunKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchStatement__Group__1__Impl
	rule__BatchStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getAlternatives_1()); }
(rule__BatchStatement__Alternatives_1)
{ after(grammarAccess.getBatchStatementAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchStatement__Group__2__Impl
	rule__BatchStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getAlternatives_2()); }
(rule__BatchStatement__Alternatives_2)
{ after(grammarAccess.getBatchStatementAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getAlternatives_3()); }
(rule__BatchStatement__Alternatives_3)?
{ after(grammarAccess.getBatchStatementAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BatchStatement__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchStatement__Group_1_1__0__Impl
	rule__BatchStatement__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getJobNameAssignment_1_1_0()); }
(rule__BatchStatement__JobNameAssignment_1_1_0)
{ after(grammarAccess.getBatchStatementAccess().getJobNameAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchStatement__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchStatement__Group_1_1__1__Impl
	rule__BatchStatement__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getAsKeyword_1_1_1()); }

	'as' 

{ after(grammarAccess.getBatchStatementAccess().getAsKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchStatement__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchStatement__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getNameAssignment_1_1_2()); }
(rule__BatchStatement__NameAssignment_1_1_2)
{ after(grammarAccess.getBatchStatementAccess().getNameAssignment_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BatchStatement__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchStatement__Group_2_1__0__Impl
	rule__BatchStatement__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getAfterKeyword_2_1_0()); }

	'after' 

{ after(grammarAccess.getBatchStatementAccess().getAfterKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchStatement__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchStatement__Group_2_1__1__Impl
	rule__BatchStatement__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getAfterAssignment_2_1_1()); }
(rule__BatchStatement__AfterAssignment_2_1_1)
{ after(grammarAccess.getBatchStatementAccess().getAfterAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchStatement__Group_2_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchStatement__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__Group_2_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getGroup_2_1_2()); }
(rule__BatchStatement__Group_2_1_2__0)*
{ after(grammarAccess.getBatchStatementAccess().getGroup_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BatchStatement__Group_2_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchStatement__Group_2_1_2__0__Impl
	rule__BatchStatement__Group_2_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__Group_2_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getCommaKeyword_2_1_2_0()); }

	',' 

{ after(grammarAccess.getBatchStatementAccess().getCommaKeyword_2_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BatchStatement__Group_2_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BatchStatement__Group_2_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__Group_2_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getAfterAssignment_2_1_2_1()); }
(rule__BatchStatement__AfterAssignment_2_1_2_1)
{ after(grammarAccess.getBatchStatementAccess().getAfterAssignment_2_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FQN__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group__0__Impl
	rule__FQN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getNameParserRuleCall_0()); }
	ruleName
{ after(grammarAccess.getFQNAccess().getNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getGroup_1()); }
(rule__FQN__Group_1__0)*
{ after(grammarAccess.getFQNAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FQN__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group_1__0__Impl
	rule__FQN__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getNameParserRuleCall_1_1()); }
	ruleName
{ after(grammarAccess.getFQNAccess().getNameParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Script__PackageAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getPackagePackageDeclareParserRuleCall_0_0()); }
	rulePackageDeclare{ after(grammarAccess.getScriptAccess().getPackagePackageDeclareParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Script__ImportsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getImportsImportDeclareParserRuleCall_1_0()); }
	ruleImportDeclare{ after(grammarAccess.getScriptAccess().getImportsImportDeclareParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Script__ListAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getListBatchDslParserRuleCall_2_0()); }
	ruleBatchDsl{ after(grammarAccess.getScriptAccess().getListBatchDslParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclare__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclareAccess().getNameFQNParserRuleCall_1_0()); }
	ruleFQN{ after(grammarAccess.getPackageDeclareAccess().getNameFQNParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclare__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclareAccess().getNameFQNParserRuleCall_1_0()); }
	ruleFQN{ after(grammarAccess.getImportDeclareAccess().getNameFQNParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclare__WildcardAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclareAccess().getWildcardAsteriskKeyword_2_1_0()); }
(
{ before(grammarAccess.getImportDeclareAccess().getWildcardAsteriskKeyword_2_1_0()); }

	'*' 

{ after(grammarAccess.getImportDeclareAccess().getWildcardAsteriskKeyword_2_1_0()); }
)

{ after(grammarAccess.getImportDeclareAccess().getWildcardAsteriskKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BatchDsl__CommentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchDslAccess().getCommentSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getBatchDslAccess().getCommentSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BatchDsl__ParamsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchDslAccess().getParamsBatchParameterParserRuleCall_1_0()); }
	ruleBatchParameter{ after(grammarAccess.getBatchDslAccess().getParamsBatchParameterParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BatchDsl__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchDslAccess().getNameNameParserRuleCall_3_0()); }
	ruleName{ after(grammarAccess.getBatchDslAccess().getNameNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BatchDsl__StatementsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchDslAccess().getStatementsBatchStatementParserRuleCall_5_0()); }
	ruleBatchStatement{ after(grammarAccess.getBatchDslAccess().getStatementsBatchStatementParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__CommentAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getCommentSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getBatchParameterAccess().getCommentSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__NameAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getNameNameParserRuleCall_4_0()); }
	ruleName{ after(grammarAccess.getBatchParameterAccess().getNameNameParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__PatternAssignment_5_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getPatternSTRINGTerminalRuleCall_5_3_0()); }
	RULE_STRING{ after(grammarAccess.getBatchParameterAccess().getPatternSTRINGTerminalRuleCall_5_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BatchParameter__RequiredAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchParameterAccess().getRequiredRequiredKeyword_6_1_0()); }
(
{ before(grammarAccess.getBatchParameterAccess().getRequiredRequiredKeyword_6_1_0()); }

	'required' 

{ after(grammarAccess.getBatchParameterAccess().getRequiredRequiredKeyword_6_1_0()); }
)

{ after(grammarAccess.getBatchParameterAccess().getRequiredRequiredKeyword_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__NameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getNameFQNParserRuleCall_1_0_0()); }
	ruleFQN{ after(grammarAccess.getBatchStatementAccess().getNameFQNParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__JobNameAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getJobNameFQNParserRuleCall_1_1_0_0()); }
	ruleFQN{ after(grammarAccess.getBatchStatementAccess().getJobNameFQNParserRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__NameAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getNameNameParserRuleCall_1_1_2_0()); }
	ruleName{ after(grammarAccess.getBatchStatementAccess().getNameNameParserRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__SoonAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getSoonSoonKeyword_2_0_0()); }
(
{ before(grammarAccess.getBatchStatementAccess().getSoonSoonKeyword_2_0_0()); }

	'soon' 

{ after(grammarAccess.getBatchStatementAccess().getSoonSoonKeyword_2_0_0()); }
)

{ after(grammarAccess.getBatchStatementAccess().getSoonSoonKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__AfterAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getAfterBatchStatementCrossReference_2_1_1_0()); }
(
{ before(grammarAccess.getBatchStatementAccess().getAfterBatchStatementIDTerminalRuleCall_2_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getBatchStatementAccess().getAfterBatchStatementIDTerminalRuleCall_2_1_1_0_1()); }
)
{ after(grammarAccess.getBatchStatementAccess().getAfterBatchStatementCrossReference_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BatchStatement__AfterAssignment_2_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBatchStatementAccess().getAfterBatchStatementCrossReference_2_1_2_1_0()); }
(
{ before(grammarAccess.getBatchStatementAccess().getAfterBatchStatementIDTerminalRuleCall_2_1_2_1_0_1()); }
	RULE_ID{ after(grammarAccess.getBatchStatementAccess().getAfterBatchStatementIDTerminalRuleCall_2_1_2_1_0_1()); }
)
{ after(grammarAccess.getBatchStatementAccess().getAfterBatchStatementCrossReference_2_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : ('//'|'--') ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


