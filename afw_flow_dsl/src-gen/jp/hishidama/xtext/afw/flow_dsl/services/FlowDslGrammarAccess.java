/*
* generated by Xtext
*/
package jp.hishidama.xtext.afw.flow_dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class FlowDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Script");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackagePackageDeclareParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportDeclareParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cOperatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorsOperatorDeclareParserRuleCall_2_0 = (RuleCall)cOperatorsAssignment_2.eContents().get(0);
		private final Assignment cListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cListFlowDslParserRuleCall_3_0 = (RuleCall)cListAssignment_3.eContents().get(0);
		
		//Script:
		//
		//	package=PackageDeclare imports+=ImportDeclare* operators+=OperatorDeclare* list+=FlowDsl*;
		public ParserRule getRule() { return rule; }

		//package=PackageDeclare imports+=ImportDeclare* operators+=OperatorDeclare* list+=FlowDsl*
		public Group getGroup() { return cGroup; }

		//package=PackageDeclare
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }

		//PackageDeclare
		public RuleCall getPackagePackageDeclareParserRuleCall_0_0() { return cPackagePackageDeclareParserRuleCall_0_0; }

		//imports+=ImportDeclare*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//ImportDeclare
		public RuleCall getImportsImportDeclareParserRuleCall_1_0() { return cImportsImportDeclareParserRuleCall_1_0; }

		//operators+=OperatorDeclare*
		public Assignment getOperatorsAssignment_2() { return cOperatorsAssignment_2; }

		//OperatorDeclare
		public RuleCall getOperatorsOperatorDeclareParserRuleCall_2_0() { return cOperatorsOperatorDeclareParserRuleCall_2_0; }

		//list+=FlowDsl*
		public Assignment getListAssignment_3() { return cListAssignment_3; }

		//FlowDsl
		public RuleCall getListFlowDslParserRuleCall_3_0() { return cListFlowDslParserRuleCall_3_0; }
	}

	public class PackageDeclareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PackageDeclare:
		//
		//	"package" name=FQN ";"?;
		public ParserRule getRule() { return rule; }

		//"package" name=FQN ";"?
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ImportDeclareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportDeclare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cWildcardAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cWildcardAsteriskKeyword_2_1_0 = (Keyword)cWildcardAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ImportDeclare:
		//
		//	"import" name=FQN ("." wildcard?="*")? ";"?;
		public ParserRule getRule() { return rule; }

		//"import" name=FQN ("." wildcard?="*")? ";"?
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }

		//("." wildcard?="*")?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//wildcard?="*"
		public Assignment getWildcardAssignment_2_1() { return cWildcardAssignment_2_1; }

		//"*"
		public Keyword getWildcardAsteriskKeyword_2_1_0() { return cWildcardAsteriskKeyword_2_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class OperatorDeclareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorDeclare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorFQNParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OperatorDeclare:
		//
		//	"operator" operator=FQN "as" name=Name ";"?;
		public ParserRule getRule() { return rule; }

		//"operator" operator=FQN "as" name=Name ";"?
		public Group getGroup() { return cGroup; }

		//"operator"
		public Keyword getOperatorKeyword_0() { return cOperatorKeyword_0; }

		//operator=FQN
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//FQN
		public RuleCall getOperatorFQNParserRuleCall_1_0() { return cOperatorFQNParserRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//name=Name
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//Name
		public RuleCall getNameNameParserRuleCall_3_0() { return cNameNameParserRuleCall_3_0; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class FlowDslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowDsl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentSTRINGTerminalRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Keyword cJobflowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamsFlowParameterParserRuleCall_4_0 = (RuleCall)cParamsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStatementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatementsFlowStatementParserRuleCall_7_0 = (RuleCall)cStatementsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//FlowDsl:
		//
		//	comment=STRING? "jobflow" name=Name "(" params+=FlowParameter+ ")" "{" statements+=FlowStatement* "}" ";"?;
		public ParserRule getRule() { return rule; }

		//comment=STRING? "jobflow" name=Name "(" params+=FlowParameter+ ")" "{" statements+=FlowStatement* "}" ";"?
		public Group getGroup() { return cGroup; }

		//comment=STRING?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }

		//STRING
		public RuleCall getCommentSTRINGTerminalRuleCall_0_0() { return cCommentSTRINGTerminalRuleCall_0_0; }

		//"jobflow"
		public Keyword getJobflowKeyword_1() { return cJobflowKeyword_1; }

		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//params+=FlowParameter+
		public Assignment getParamsAssignment_4() { return cParamsAssignment_4; }

		//FlowParameter
		public RuleCall getParamsFlowParameterParserRuleCall_4_0() { return cParamsFlowParameterParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//statements+=FlowStatement*
		public Assignment getStatementsAssignment_7() { return cStatementsAssignment_7; }

		//FlowStatement
		public RuleCall getStatementsFlowStatementParserRuleCall_7_0() { return cStatementsFlowStatementParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }

		//";"?
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}

	public class FlowParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cInFlowInParserRuleCall_0_0 = (RuleCall)cInAssignment_0.eContents().get(0);
		private final Assignment cOutAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOutFlowOutParserRuleCall_1_0 = (RuleCall)cOutAssignment_1.eContents().get(0);
		
		//FlowParameter:
		//
		//	in=FlowIn | out=FlowOut;
		public ParserRule getRule() { return rule; }

		//in=FlowIn | out=FlowOut
		public Alternatives getAlternatives() { return cAlternatives; }

		//in=FlowIn
		public Assignment getInAssignment_0() { return cInAssignment_0; }

		//FlowIn
		public RuleCall getInFlowInParserRuleCall_0_0() { return cInFlowInParserRuleCall_0_0; }

		//out=FlowOut
		public Assignment getOutAssignment_1() { return cOutAssignment_1; }

		//FlowOut
		public RuleCall getOutFlowOutParserRuleCall_1_0() { return cOutFlowOutParserRuleCall_1_0; }
	}

	public class FlowInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowIn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInoutAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cInoutInKeyword_0_0 = (Keyword)cInoutAssignment_0.eContents().get(0);
		private final Assignment cModelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModelNameParserRuleCall_1_0 = (RuleCall)cModelAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cImporterKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cImporterDescriptionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cImporterDescriptionFQNParserRuleCall_4_2_0 = (RuleCall)cImporterDescriptionAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cAsKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cImporterNameAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cImporterNameNameParserRuleCall_4_3_1_0 = (RuleCall)cImporterNameAssignment_4_3_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cFullStopKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//FlowIn:
		//
		//	inout="in" model=Name "as" name=Name (","? "importer" importerDescription=FQN ("as" importerName=Name)?)? (";" |
		//
		//	".")?;
		public ParserRule getRule() { return rule; }

		//inout="in" model=Name "as" name=Name (","? "importer" importerDescription=FQN ("as" importerName=Name)?)? (";" | ".")?
		public Group getGroup() { return cGroup; }

		//inout="in"
		public Assignment getInoutAssignment_0() { return cInoutAssignment_0; }

		//"in"
		public Keyword getInoutInKeyword_0_0() { return cInoutInKeyword_0_0; }

		//model=Name
		public Assignment getModelAssignment_1() { return cModelAssignment_1; }

		//Name
		public RuleCall getModelNameParserRuleCall_1_0() { return cModelNameParserRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//name=Name
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//Name
		public RuleCall getNameNameParserRuleCall_3_0() { return cNameNameParserRuleCall_3_0; }

		//(","? "importer" importerDescription=FQN ("as" importerName=Name)?)?
		public Group getGroup_4() { return cGroup_4; }

		//","?
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//"importer"
		public Keyword getImporterKeyword_4_1() { return cImporterKeyword_4_1; }

		//importerDescription=FQN
		public Assignment getImporterDescriptionAssignment_4_2() { return cImporterDescriptionAssignment_4_2; }

		//FQN
		public RuleCall getImporterDescriptionFQNParserRuleCall_4_2_0() { return cImporterDescriptionFQNParserRuleCall_4_2_0; }

		//("as" importerName=Name)?
		public Group getGroup_4_3() { return cGroup_4_3; }

		//"as"
		public Keyword getAsKeyword_4_3_0() { return cAsKeyword_4_3_0; }

		//importerName=Name
		public Assignment getImporterNameAssignment_4_3_1() { return cImporterNameAssignment_4_3_1; }

		//Name
		public RuleCall getImporterNameNameParserRuleCall_4_3_1_0() { return cImporterNameNameParserRuleCall_4_3_1_0; }

		//(";" | ".")?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//";"
		public Keyword getSemicolonKeyword_5_0() { return cSemicolonKeyword_5_0; }

		//"."
		public Keyword getFullStopKeyword_5_1() { return cFullStopKeyword_5_1; }
	}

	public class FlowOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowOut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInoutAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cInoutOutKeyword_0_0 = (Keyword)cInoutAssignment_0.eContents().get(0);
		private final Assignment cModelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModelNameParserRuleCall_1_0 = (RuleCall)cModelAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cExporterKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cExporterDescriptionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cExporterDescriptionFQNParserRuleCall_4_2_0 = (RuleCall)cExporterDescriptionAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cAsKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cExporterNameAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cExporterNameNameParserRuleCall_4_3_1_0 = (RuleCall)cExporterNameAssignment_4_3_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cFullStopKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//FlowOut:
		//
		//	inout="out" model=Name "as" name=Name (","? "exporter" exporterDescription=FQN ("as" exporterName=Name)?)? (";" |
		//
		//	".")?;
		public ParserRule getRule() { return rule; }

		//inout="out" model=Name "as" name=Name (","? "exporter" exporterDescription=FQN ("as" exporterName=Name)?)? (";" | ".")?
		public Group getGroup() { return cGroup; }

		//inout="out"
		public Assignment getInoutAssignment_0() { return cInoutAssignment_0; }

		//"out"
		public Keyword getInoutOutKeyword_0_0() { return cInoutOutKeyword_0_0; }

		//model=Name
		public Assignment getModelAssignment_1() { return cModelAssignment_1; }

		//Name
		public RuleCall getModelNameParserRuleCall_1_0() { return cModelNameParserRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//name=Name
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//Name
		public RuleCall getNameNameParserRuleCall_3_0() { return cNameNameParserRuleCall_3_0; }

		//(","? "exporter" exporterDescription=FQN ("as" exporterName=Name)?)?
		public Group getGroup_4() { return cGroup_4; }

		//","?
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//"exporter"
		public Keyword getExporterKeyword_4_1() { return cExporterKeyword_4_1; }

		//exporterDescription=FQN
		public Assignment getExporterDescriptionAssignment_4_2() { return cExporterDescriptionAssignment_4_2; }

		//FQN
		public RuleCall getExporterDescriptionFQNParserRuleCall_4_2_0() { return cExporterDescriptionFQNParserRuleCall_4_2_0; }

		//("as" exporterName=Name)?
		public Group getGroup_4_3() { return cGroup_4_3; }

		//"as"
		public Keyword getAsKeyword_4_3_0() { return cAsKeyword_4_3_0; }

		//exporterName=Name
		public Assignment getExporterNameAssignment_4_3_1() { return cExporterNameAssignment_4_3_1; }

		//Name
		public RuleCall getExporterNameNameParserRuleCall_4_3_1_0() { return cExporterNameNameParserRuleCall_4_3_1_0; }

		//(";" | ".")?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//";"
		public Keyword getSemicolonKeyword_5_0() { return cSemicolonKeyword_5_0; }

		//"."
		public Keyword getFullStopKeyword_5_1() { return cFullStopKeyword_5_1; }
	}

	public class FlowStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFlowStatement1ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFlowStatement2ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FlowStatement:
		//
		//	FlowStatement1 | FlowStatement2;
		public ParserRule getRule() { return rule; }

		//FlowStatement1 | FlowStatement2
		public Alternatives getAlternatives() { return cAlternatives; }

		//FlowStatement1
		public RuleCall getFlowStatement1ParserRuleCall_0() { return cFlowStatement1ParserRuleCall_0; }

		//FlowStatement2
		public RuleCall getFlowStatement2ParserRuleCall_1() { return cFlowStatement2ParserRuleCall_1; }
	}

	public class FlowStatement1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowStatement1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cOperatorOperatorDeclareCrossReference_1_0 = (CrossReference)cOperatorAssignment_1.eContents().get(0);
		private final RuleCall cOperatorOperatorDeclareIDTerminalRuleCall_1_0_1 = (RuleCall)cOperatorOperatorDeclareCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMethodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodNameParserRuleCall_3_0 = (RuleCall)cMethodAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cArgumentsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cArgumentsOperatorArgumentParserRuleCall_5_0_0 = (RuleCall)cArgumentsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cArgumentsOperatorArgumentParserRuleCall_5_1_1_0 = (RuleCall)cArgumentsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_7_0 = (Keyword)cAlternatives_7.eContents().get(0);
		private final Keyword cFullStopKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		
		//FlowStatement1:
		//
		//	(name=Name "=")? operator=[OperatorDeclare] "." method=Name "(" (arguments+=OperatorArgument (","
		//
		//	arguments+=OperatorArgument)*)? ")" (";" | ".")?;
		public ParserRule getRule() { return rule; }

		//(name=Name "=")? operator=[OperatorDeclare] "." method=Name "(" (arguments+=OperatorArgument (","
		//
		//arguments+=OperatorArgument)*)? ")" (";" | ".")?
		public Group getGroup() { return cGroup; }

		//(name=Name "=")?
		public Group getGroup_0() { return cGroup_0; }

		//name=Name
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0_0() { return cNameNameParserRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//operator=[OperatorDeclare]
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//[OperatorDeclare]
		public CrossReference getOperatorOperatorDeclareCrossReference_1_0() { return cOperatorOperatorDeclareCrossReference_1_0; }

		//ID
		public RuleCall getOperatorOperatorDeclareIDTerminalRuleCall_1_0_1() { return cOperatorOperatorDeclareIDTerminalRuleCall_1_0_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//method=Name
		public Assignment getMethodAssignment_3() { return cMethodAssignment_3; }

		//Name
		public RuleCall getMethodNameParserRuleCall_3_0() { return cMethodNameParserRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(arguments+=OperatorArgument ("," arguments+=OperatorArgument)*)?
		public Group getGroup_5() { return cGroup_5; }

		//arguments+=OperatorArgument
		public Assignment getArgumentsAssignment_5_0() { return cArgumentsAssignment_5_0; }

		//OperatorArgument
		public RuleCall getArgumentsOperatorArgumentParserRuleCall_5_0_0() { return cArgumentsOperatorArgumentParserRuleCall_5_0_0; }

		//("," arguments+=OperatorArgument)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//arguments+=OperatorArgument
		public Assignment getArgumentsAssignment_5_1_1() { return cArgumentsAssignment_5_1_1; }

		//OperatorArgument
		public RuleCall getArgumentsOperatorArgumentParserRuleCall_5_1_1_0() { return cArgumentsOperatorArgumentParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//(";" | ".")?
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//";"
		public Keyword getSemicolonKeyword_7_0() { return cSemicolonKeyword_7_0; }

		//"."
		public Keyword getFullStopKeyword_7_1() { return cFullStopKeyword_7_1; }
	}

	public class FlowStatement2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlowStatement2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameFlowOutCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameFlowOutIDTerminalRuleCall_0_0_1 = (RuleCall)cNameFlowOutCrossReference_0_0.eContents().get(1);
		private final Keyword cPlusSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsOperatorArgumentParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsOperatorArgumentParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cFullStopKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//FlowStatement2:
		//
		//	name=[FlowOut] "+=" "(" (arguments+=OperatorArgument ("," arguments+=OperatorArgument)*)? ")" (";" | ".")?;
		public ParserRule getRule() { return rule; }

		//name=[FlowOut] "+=" "(" (arguments+=OperatorArgument ("," arguments+=OperatorArgument)*)? ")" (";" | ".")?
		public Group getGroup() { return cGroup; }

		//name=[FlowOut]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[FlowOut]
		public CrossReference getNameFlowOutCrossReference_0_0() { return cNameFlowOutCrossReference_0_0; }

		//ID
		public RuleCall getNameFlowOutIDTerminalRuleCall_0_0_1() { return cNameFlowOutIDTerminalRuleCall_0_0_1; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_1() { return cPlusSignEqualsSignKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(arguments+=OperatorArgument ("," arguments+=OperatorArgument)*)?
		public Group getGroup_3() { return cGroup_3; }

		//arguments+=OperatorArgument
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }

		//OperatorArgument
		public RuleCall getArgumentsOperatorArgumentParserRuleCall_3_0_0() { return cArgumentsOperatorArgumentParserRuleCall_3_0_0; }

		//("," arguments+=OperatorArgument)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//arguments+=OperatorArgument
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }

		//OperatorArgument
		public RuleCall getArgumentsOperatorArgumentParserRuleCall_3_1_1_0() { return cArgumentsOperatorArgumentParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//(";" | ".")?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//";"
		public Keyword getSemicolonKeyword_5_0() { return cSemicolonKeyword_5_0; }

		//"."
		public Keyword getFullStopKeyword_5_1() { return cFullStopKeyword_5_1; }
	}

	public class OperatorArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cInAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cInFlowInCrossReference_0_0_0 = (CrossReference)cInAssignment_0_0.eContents().get(0);
		private final RuleCall cInFlowInIDTerminalRuleCall_0_0_0_1 = (RuleCall)cInFlowInCrossReference_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Assignment cInAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cInFlowStatementCrossReference_1_0 = (CrossReference)cInAssignment_1.eContents().get(0);
		private final RuleCall cInFlowStatementIDTerminalRuleCall_1_0_1 = (RuleCall)cInFlowStatementCrossReference_1_0.eContents().get(1);
		
		//OperatorArgument:
		//
		//	in=[FlowIn] "." name=Name | in=[FlowStatement];
		public ParserRule getRule() { return rule; }

		//in=[FlowIn] "." name=Name | in=[FlowStatement]
		public Alternatives getAlternatives() { return cAlternatives; }

		//in=[FlowIn] "." name=Name
		public Group getGroup_0() { return cGroup_0; }

		//in=[FlowIn]
		public Assignment getInAssignment_0_0() { return cInAssignment_0_0; }

		//[FlowIn]
		public CrossReference getInFlowInCrossReference_0_0_0() { return cInFlowInCrossReference_0_0_0; }

		//ID
		public RuleCall getInFlowInIDTerminalRuleCall_0_0_0_1() { return cInFlowInIDTerminalRuleCall_0_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//name=Name
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_2_0() { return cNameNameParserRuleCall_0_2_0; }

		//in=[FlowStatement]
		public Assignment getInAssignment_1() { return cInAssignment_1; }

		//[FlowStatement]
		public CrossReference getInFlowStatementCrossReference_1_0() { return cInFlowStatementCrossReference_1_0; }

		//ID
		public RuleCall getInFlowStatementIDTerminalRuleCall_1_0_1() { return cInFlowStatementIDTerminalRuleCall_1_0_1; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN returns ecore::EString:
		//
		//	Name ("." Name)*;
		public ParserRule getRule() { return rule; }

		//Name ("." Name)*
		public Group getGroup() { return cGroup; }

		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }

		//("." Name)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//Name
		public RuleCall getNameParserRuleCall_1_1() { return cNameParserRuleCall_1_1; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cOperatorKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cJobflowKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cOutKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAsKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cImporterKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cExporterKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//Name:
		//
		//	ID | "operator" | "jobflow" | "in" | "out" | "as" | "importer" | "exporter";
		public ParserRule getRule() { return rule; }

		//ID | "operator" | "jobflow" | "in" | "out" | "as" | "importer" | "exporter"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"operator"
		public Keyword getOperatorKeyword_1() { return cOperatorKeyword_1; }

		//"jobflow"
		public Keyword getJobflowKeyword_2() { return cJobflowKeyword_2; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//"out"
		public Keyword getOutKeyword_4() { return cOutKeyword_4; }

		//"as"
		public Keyword getAsKeyword_5() { return cAsKeyword_5; }

		//"importer"
		public Keyword getImporterKeyword_6() { return cImporterKeyword_6; }

		//"exporter"
		public Keyword getExporterKeyword_7() { return cExporterKeyword_7; }
	}
	
	
	private ScriptElements pScript;
	private PackageDeclareElements pPackageDeclare;
	private ImportDeclareElements pImportDeclare;
	private OperatorDeclareElements pOperatorDeclare;
	private FlowDslElements pFlowDsl;
	private FlowParameterElements pFlowParameter;
	private FlowInElements pFlowIn;
	private FlowOutElements pFlowOut;
	private FlowStatementElements pFlowStatement;
	private FlowStatement1Elements pFlowStatement1;
	private FlowStatement2Elements pFlowStatement2;
	private OperatorArgumentElements pOperatorArgument;
	private FQNElements pFQN;
	private NameElements pName;
	private TerminalRule tID;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public FlowDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("jp.hishidama.xtext.afw.flow_dsl.FlowDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Script:
	//
	//	package=PackageDeclare imports+=ImportDeclare* operators+=OperatorDeclare* list+=FlowDsl*;
	public ScriptElements getScriptAccess() {
		return (pScript != null) ? pScript : (pScript = new ScriptElements());
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}

	//PackageDeclare:
	//
	//	"package" name=FQN ";"?;
	public PackageDeclareElements getPackageDeclareAccess() {
		return (pPackageDeclare != null) ? pPackageDeclare : (pPackageDeclare = new PackageDeclareElements());
	}
	
	public ParserRule getPackageDeclareRule() {
		return getPackageDeclareAccess().getRule();
	}

	//ImportDeclare:
	//
	//	"import" name=FQN ("." wildcard?="*")? ";"?;
	public ImportDeclareElements getImportDeclareAccess() {
		return (pImportDeclare != null) ? pImportDeclare : (pImportDeclare = new ImportDeclareElements());
	}
	
	public ParserRule getImportDeclareRule() {
		return getImportDeclareAccess().getRule();
	}

	//OperatorDeclare:
	//
	//	"operator" operator=FQN "as" name=Name ";"?;
	public OperatorDeclareElements getOperatorDeclareAccess() {
		return (pOperatorDeclare != null) ? pOperatorDeclare : (pOperatorDeclare = new OperatorDeclareElements());
	}
	
	public ParserRule getOperatorDeclareRule() {
		return getOperatorDeclareAccess().getRule();
	}

	//FlowDsl:
	//
	//	comment=STRING? "jobflow" name=Name "(" params+=FlowParameter+ ")" "{" statements+=FlowStatement* "}" ";"?;
	public FlowDslElements getFlowDslAccess() {
		return (pFlowDsl != null) ? pFlowDsl : (pFlowDsl = new FlowDslElements());
	}
	
	public ParserRule getFlowDslRule() {
		return getFlowDslAccess().getRule();
	}

	//FlowParameter:
	//
	//	in=FlowIn | out=FlowOut;
	public FlowParameterElements getFlowParameterAccess() {
		return (pFlowParameter != null) ? pFlowParameter : (pFlowParameter = new FlowParameterElements());
	}
	
	public ParserRule getFlowParameterRule() {
		return getFlowParameterAccess().getRule();
	}

	//FlowIn:
	//
	//	inout="in" model=Name "as" name=Name (","? "importer" importerDescription=FQN ("as" importerName=Name)?)? (";" |
	//
	//	".")?;
	public FlowInElements getFlowInAccess() {
		return (pFlowIn != null) ? pFlowIn : (pFlowIn = new FlowInElements());
	}
	
	public ParserRule getFlowInRule() {
		return getFlowInAccess().getRule();
	}

	//FlowOut:
	//
	//	inout="out" model=Name "as" name=Name (","? "exporter" exporterDescription=FQN ("as" exporterName=Name)?)? (";" |
	//
	//	".")?;
	public FlowOutElements getFlowOutAccess() {
		return (pFlowOut != null) ? pFlowOut : (pFlowOut = new FlowOutElements());
	}
	
	public ParserRule getFlowOutRule() {
		return getFlowOutAccess().getRule();
	}

	//FlowStatement:
	//
	//	FlowStatement1 | FlowStatement2;
	public FlowStatementElements getFlowStatementAccess() {
		return (pFlowStatement != null) ? pFlowStatement : (pFlowStatement = new FlowStatementElements());
	}
	
	public ParserRule getFlowStatementRule() {
		return getFlowStatementAccess().getRule();
	}

	//FlowStatement1:
	//
	//	(name=Name "=")? operator=[OperatorDeclare] "." method=Name "(" (arguments+=OperatorArgument (","
	//
	//	arguments+=OperatorArgument)*)? ")" (";" | ".")?;
	public FlowStatement1Elements getFlowStatement1Access() {
		return (pFlowStatement1 != null) ? pFlowStatement1 : (pFlowStatement1 = new FlowStatement1Elements());
	}
	
	public ParserRule getFlowStatement1Rule() {
		return getFlowStatement1Access().getRule();
	}

	//FlowStatement2:
	//
	//	name=[FlowOut] "+=" "(" (arguments+=OperatorArgument ("," arguments+=OperatorArgument)*)? ")" (";" | ".")?;
	public FlowStatement2Elements getFlowStatement2Access() {
		return (pFlowStatement2 != null) ? pFlowStatement2 : (pFlowStatement2 = new FlowStatement2Elements());
	}
	
	public ParserRule getFlowStatement2Rule() {
		return getFlowStatement2Access().getRule();
	}

	//OperatorArgument:
	//
	//	in=[FlowIn] "." name=Name | in=[FlowStatement];
	public OperatorArgumentElements getOperatorArgumentAccess() {
		return (pOperatorArgument != null) ? pOperatorArgument : (pOperatorArgument = new OperatorArgumentElements());
	}
	
	public ParserRule getOperatorArgumentRule() {
		return getOperatorArgumentAccess().getRule();
	}

	//FQN returns ecore::EString:
	//
	//	Name ("." Name)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//Name:
	//
	//	ID | "operator" | "jobflow" | "in" | "out" | "as" | "importer" | "exporter";
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//
	//	("//" | "--") !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
