/*
* generated by Xtext
*/
grammar InternalFlowDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package jp.hishidama.xtext.afw.flow_dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package jp.hishidama.xtext.afw.flow_dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import jp.hishidama.xtext.afw.flow_dsl.services.FlowDslGrammarAccess;

}

@parser::members {

 	private FlowDslGrammarAccess grammarAccess;
 	
    public InternalFlowDslParser(TokenStream input, FlowDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Script";	
   	}
   	
   	@Override
   	protected FlowDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleScript
entryRuleScript returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScriptRule()); }
	 iv_ruleScript=ruleScript 
	 { $current=$iv_ruleScript.current; } 
	 EOF 
;

// Rule Script
ruleScript returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getScriptAccess().getPackagePackageDeclareParserRuleCall_0_0()); 
	    }
		lv_package_0_0=rulePackageDeclare		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptRule());
	        }
       		set(
       			$current, 
       			"package",
        		lv_package_0_0, 
        		"PackageDeclare");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptAccess().getImportsImportDeclareParserRuleCall_1_0()); 
	    }
		lv_imports_1_0=ruleImportDeclare		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_1_0, 
        		"ImportDeclare");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptAccess().getOperatorsOperatorDeclareParserRuleCall_2_0()); 
	    }
		lv_operators_2_0=ruleOperatorDeclare		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptRule());
	        }
       		add(
       			$current, 
       			"operators",
        		lv_operators_2_0, 
        		"OperatorDeclare");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptAccess().getListFlowDslParserRuleCall_3_0()); 
	    }
		lv_list_3_0=ruleFlowDsl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptRule());
	        }
       		add(
       			$current, 
       			"list",
        		lv_list_3_0, 
        		"FlowDsl");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRulePackageDeclare
entryRulePackageDeclare returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageDeclareRule()); }
	 iv_rulePackageDeclare=rulePackageDeclare 
	 { $current=$iv_rulePackageDeclare.current; } 
	 EOF 
;

// Rule PackageDeclare
rulePackageDeclare returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageDeclareAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclareAccess().getNameFQNParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclareRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPackageDeclareAccess().getSemicolonKeyword_2());
    }
)?)
;





// Entry rule entryRuleImportDeclare
entryRuleImportDeclare returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportDeclareRule()); }
	 iv_ruleImportDeclare=ruleImportDeclare 
	 { $current=$iv_ruleImportDeclare.current; } 
	 EOF 
;

// Rule ImportDeclare
ruleImportDeclare returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportDeclareAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportDeclareAccess().getNameFQNParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportDeclareRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImportDeclareAccess().getFullStopKeyword_2_0());
    }
(
(
		lv_wildcard_3_0=	'*' 
    {
        newLeafNode(lv_wildcard_3_0, grammarAccess.getImportDeclareAccess().getWildcardAsteriskKeyword_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportDeclareRule());
	        }
       		setWithLastConsumed($current, "wildcard", true, "*");
	    }

)
))?(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getImportDeclareAccess().getSemicolonKeyword_3());
    }
)?)
;





// Entry rule entryRuleOperatorDeclare
entryRuleOperatorDeclare returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorDeclareRule()); }
	 iv_ruleOperatorDeclare=ruleOperatorDeclare 
	 { $current=$iv_ruleOperatorDeclare.current; } 
	 EOF 
;

// Rule OperatorDeclare
ruleOperatorDeclare returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='operator' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOperatorDeclareAccess().getOperatorKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperatorDeclareAccess().getOperatorFQNParserRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperatorDeclareRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOperatorDeclareAccess().getAsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperatorDeclareAccess().getNameNameParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperatorDeclareRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOperatorDeclareAccess().getSemicolonKeyword_4());
    }
)?)
;





// Entry rule entryRuleFlowDsl
entryRuleFlowDsl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFlowDslRule()); }
	 iv_ruleFlowDsl=ruleFlowDsl 
	 { $current=$iv_ruleFlowDsl.current; } 
	 EOF 
;

// Rule FlowDsl
ruleFlowDsl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_comment_0_0=RULE_STRING
		{
			newLeafNode(lv_comment_0_0, grammarAccess.getFlowDslAccess().getCommentSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFlowDslRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"STRING");
	    }

)
)?	otherlv_1='jobflow' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFlowDslAccess().getJobflowKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowDslAccess().getNameNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowDslRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFlowDslAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowDslAccess().getParamsFlowParameterParserRuleCall_4_0()); 
	    }
		lv_params_4_0=ruleFlowParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowDslRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"FlowParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFlowDslAccess().getRightParenthesisKeyword_5());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFlowDslAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowDslAccess().getStatementsFlowStatementParserRuleCall_7_0()); 
	    }
		lv_statements_7_0=ruleFlowStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowDslRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_7_0, 
        		"FlowStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFlowDslAccess().getRightCurlyBracketKeyword_8());
    }
(	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFlowDslAccess().getSemicolonKeyword_9());
    }
)?)
;





// Entry rule entryRuleFlowParameter
entryRuleFlowParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFlowParameterRule()); }
	 iv_ruleFlowParameter=ruleFlowParameter 
	 { $current=$iv_ruleFlowParameter.current; } 
	 EOF 
;

// Rule FlowParameter
ruleFlowParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFlowParameterAccess().getInFlowInParserRuleCall_0_0()); 
	    }
		lv_in_0_0=ruleFlowIn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowParameterRule());
	        }
       		set(
       			$current, 
       			"in",
        		lv_in_0_0, 
        		"FlowIn");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowParameterAccess().getOutFlowOutParserRuleCall_1_0()); 
	    }
		lv_out_1_0=ruleFlowOut		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowParameterRule());
	        }
       		set(
       			$current, 
       			"out",
        		lv_out_1_0, 
        		"FlowOut");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFlowIn
entryRuleFlowIn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFlowInRule()); }
	 iv_ruleFlowIn=ruleFlowIn 
	 { $current=$iv_ruleFlowIn.current; } 
	 EOF 
;

// Rule FlowIn
ruleFlowIn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_inout_0_0=	'in' 
    {
        newLeafNode(lv_inout_0_0, grammarAccess.getFlowInAccess().getInoutInKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFlowInRule());
	        }
       		setWithLastConsumed($current, "inout", lv_inout_0_0, "in");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowInAccess().getModelNameParserRuleCall_1_0()); 
	    }
		lv_model_1_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowInRule());
	        }
       		set(
       			$current, 
       			"model",
        		lv_model_1_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFlowInAccess().getAsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowInAccess().getNameNameParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowInRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFlowInAccess().getCommaKeyword_4_0());
    }
)?	otherlv_5='importer' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFlowInAccess().getImporterKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowInAccess().getImporterDescriptionFQNParserRuleCall_4_2_0()); 
	    }
		lv_importerDescription_6_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowInRule());
	        }
       		set(
       			$current, 
       			"importerDescription",
        		lv_importerDescription_6_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7='as' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFlowInAccess().getAsKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowInAccess().getImporterNameNameParserRuleCall_4_3_1_0()); 
	    }
		lv_importerName_8_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowInRule());
	        }
       		set(
       			$current, 
       			"importerName",
        		lv_importerName_8_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))?)?(	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFlowInAccess().getSemicolonKeyword_5_0());
    }

    |	otherlv_10='.' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFlowInAccess().getFullStopKeyword_5_1());
    }
)?)
;





// Entry rule entryRuleFlowOut
entryRuleFlowOut returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFlowOutRule()); }
	 iv_ruleFlowOut=ruleFlowOut 
	 { $current=$iv_ruleFlowOut.current; } 
	 EOF 
;

// Rule FlowOut
ruleFlowOut returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_inout_0_0=	'out' 
    {
        newLeafNode(lv_inout_0_0, grammarAccess.getFlowOutAccess().getInoutOutKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFlowOutRule());
	        }
       		setWithLastConsumed($current, "inout", lv_inout_0_0, "out");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowOutAccess().getModelNameParserRuleCall_1_0()); 
	    }
		lv_model_1_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowOutRule());
	        }
       		set(
       			$current, 
       			"model",
        		lv_model_1_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFlowOutAccess().getAsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowOutAccess().getNameNameParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowOutRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFlowOutAccess().getCommaKeyword_4_0());
    }
)?	otherlv_5='exporter' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFlowOutAccess().getExporterKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowOutAccess().getExporterDescriptionFQNParserRuleCall_4_2_0()); 
	    }
		lv_exporterDescription_6_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowOutRule());
	        }
       		set(
       			$current, 
       			"exporterDescription",
        		lv_exporterDescription_6_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7='as' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFlowOutAccess().getAsKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowOutAccess().getExporterNameNameParserRuleCall_4_3_1_0()); 
	    }
		lv_exporterName_8_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowOutRule());
	        }
       		set(
       			$current, 
       			"exporterName",
        		lv_exporterName_8_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))?)?(	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFlowOutAccess().getSemicolonKeyword_5_0());
    }

    |	otherlv_10='.' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFlowOutAccess().getFullStopKeyword_5_1());
    }
)?)
;





// Entry rule entryRuleFlowStatement
entryRuleFlowStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFlowStatementRule()); }
	 iv_ruleFlowStatement=ruleFlowStatement 
	 { $current=$iv_ruleFlowStatement.current; } 
	 EOF 
;

// Rule FlowStatement
ruleFlowStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFlowStatementAccess().getFlowStatement1ParserRuleCall_0()); 
    }
    this_FlowStatement1_0=ruleFlowStatement1
    { 
        $current = $this_FlowStatement1_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFlowStatementAccess().getFlowStatement2ParserRuleCall_1()); 
    }
    this_FlowStatement2_1=ruleFlowStatement2
    { 
        $current = $this_FlowStatement2_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFlowStatement1
entryRuleFlowStatement1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFlowStatement1Rule()); }
	 iv_ruleFlowStatement1=ruleFlowStatement1 
	 { $current=$iv_ruleFlowStatement1.current; } 
	 EOF 
;

// Rule FlowStatement1
ruleFlowStatement1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getFlowStatement1Access().getNameNameParserRuleCall_0_0_0()); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowStatement1Rule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFlowStatement1Access().getEqualsSignKeyword_0_1());
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFlowStatement1Rule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getFlowStatement1Access().getOperatorOperatorDeclareCrossReference_1_0()); 
	}

)
)	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFlowStatement1Access().getFullStopKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowStatement1Access().getMethodNameParserRuleCall_3_0()); 
	    }
		lv_method_4_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowStatement1Rule());
	        }
       		set(
       			$current, 
       			"method",
        		lv_method_4_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFlowStatement1Access().getLeftParenthesisKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFlowStatement1Access().getArgumentsOperatorArgumentParserRuleCall_5_0_0()); 
	    }
		lv_arguments_6_0=ruleOperatorArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowStatement1Rule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_6_0, 
        		"OperatorArgument");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFlowStatement1Access().getCommaKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowStatement1Access().getArgumentsOperatorArgumentParserRuleCall_5_1_1_0()); 
	    }
		lv_arguments_8_0=ruleOperatorArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowStatement1Rule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_8_0, 
        		"OperatorArgument");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFlowStatement1Access().getRightParenthesisKeyword_6());
    }
(	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFlowStatement1Access().getSemicolonKeyword_7_0());
    }

    |	otherlv_11='.' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getFlowStatement1Access().getFullStopKeyword_7_1());
    }
)?)
;





// Entry rule entryRuleFlowStatement2
entryRuleFlowStatement2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFlowStatement2Rule()); }
	 iv_ruleFlowStatement2=ruleFlowStatement2 
	 { $current=$iv_ruleFlowStatement2.current; } 
	 EOF 
;

// Rule FlowStatement2
ruleFlowStatement2 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFlowStatement2Rule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFlowStatement2Access().getNameFlowOutCrossReference_0_0()); 
	}

)
)	otherlv_1='+=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFlowStatement2Access().getPlusSignEqualsSignKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFlowStatement2Access().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFlowStatement2Access().getArgumentsOperatorArgumentParserRuleCall_3_0_0()); 
	    }
		lv_arguments_3_0=ruleOperatorArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowStatement2Rule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_3_0, 
        		"OperatorArgument");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFlowStatement2Access().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowStatement2Access().getArgumentsOperatorArgumentParserRuleCall_3_1_1_0()); 
	    }
		lv_arguments_5_0=ruleOperatorArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowStatement2Rule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_5_0, 
        		"OperatorArgument");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFlowStatement2Access().getRightParenthesisKeyword_4());
    }
(	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFlowStatement2Access().getSemicolonKeyword_5_0());
    }

    |	otherlv_8='.' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFlowStatement2Access().getFullStopKeyword_5_1());
    }
)?)
;





// Entry rule entryRuleOperatorArgument
entryRuleOperatorArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorArgumentRule()); }
	 iv_ruleOperatorArgument=ruleOperatorArgument 
	 { $current=$iv_ruleOperatorArgument.current; } 
	 EOF 
;

// Rule OperatorArgument
ruleOperatorArgument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorArgumentRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getOperatorArgumentAccess().getInFlowInCrossReference_0_0_0()); 
	}

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOperatorArgumentAccess().getFullStopKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperatorArgumentAccess().getNameNameParserRuleCall_0_2_0()); 
	    }
		lv_name_2_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperatorArgumentRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorArgumentRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getOperatorArgumentAccess().getInFlowStatementCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQNRule()); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFQNAccess().getNameParserRuleCall_0()); 
    }
    this_Name_0=ruleName    {
		$current.merge(this_Name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFQNAccess().getNameParserRuleCall_1_1()); 
    }
    this_Name_2=ruleName    {
		$current.merge(this_Name_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleName
entryRuleName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameRule()); } 
	 iv_ruleName=ruleName 
	 { $current=$iv_ruleName.current.getText(); }  
	 EOF 
;

// Rule Name
ruleName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getNameAccess().getIDTerminalRuleCall_0()); 
    }

    |
	kw='operator' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getOperatorKeyword_1()); 
    }

    |
	kw='jobflow' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getJobflowKeyword_2()); 
    }

    |
	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getInKeyword_3()); 
    }

    |
	kw='out' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getOutKeyword_4()); 
    }

    |
	kw='as' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getAsKeyword_5()); 
    }

    |
	kw='importer' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getImporterKeyword_6()); 
    }

    |
	kw='exporter' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getExporterKeyword_7()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : ('//'|'--') ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


