/*
 * first generated by Xtext
 */
package jp.hishidama.xtext.afw.flow_dsl.formatting;

import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;
import org.eclipse.xtext.xbase.lib.Extension;

import com.google.inject.Inject;

import jp.hishidama.xtext.afw.flow_dsl.services.FlowDslGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class FlowDslFormatter extends AbstractDeclarativeFormatter {

	@Inject
	@Extension
	private FlowDslGrammarAccess grammarAccess;

	@Override
	protected void configureFormatting(FormattingConfig c) {
		FlowDslGrammarAccess f = grammarAccess;

		c.setAutoLinewrap(120);

		for (Keyword period : f.findKeywords(".")) {
			c.setNoSpace().before(period);
		}
		for (Keyword period : f.getFQNAccess().findKeywords(".")) {
			c.setNoSpace().after(period);
		}
		for (Keyword period : f.getImportDeclareAccess().findKeywords(".")) {
			c.setNoSpace().after(period);
		}
		for (Keyword period : f.getFlowStatement1Access().findKeywords(".")) {
			c.setNoSpace().after(period);
		}
		for (Keyword period : f.getFlowStatement2Access().findKeywords(".")) {
			c.setNoSpace().after(period);
		}
		for (Keyword period : f.getOperatorArgumentAccess().findKeywords(".")) {
			c.setNoSpace().after(period);
		}

		for (Keyword comma : f.findKeywords(",")) {
			c.setNoSpace().before(comma); // 直前は詰める
		}
		for (Keyword semicolon : f.findKeywords(";")) {
			c.setNoSpace().before(semicolon); // 直前は詰める
		}

		for (Pair<Keyword, Keyword> pair : f.getFlowDslAccess().findKeywordPairs("(", ")")) {
			c.setIndentation(pair.getFirst(), pair.getSecond());

			c.setLinewrap().after(pair.getFirst()); // 開き括弧の後は改行する
			c.setLinewrap().before(pair.getSecond()); // 閉じ括弧の前は改行する
		}
		for (Pair<Keyword, Keyword> pair : f.getFlowStatement1Access().findKeywordPairs("(", ")")) {
			c.setNoSpace().before(pair.getFirst()); // 開き括弧の直前は詰める
			c.setNoSpace().after(pair.getFirst()); // 開き括弧の直後は詰める
			c.setNoSpace().before(pair.getSecond()); // 閉じ括弧の直前は詰める
		}
		for (Pair<Keyword, Keyword> pair : f.getFlowStatement2Access().findKeywordPairs("(", ")")) {
			c.setNoSpace().before(pair.getFirst()); // 開き括弧の直前は詰める
			c.setNoSpace().after(pair.getFirst()); // 開き括弧の直後は詰める
			c.setNoSpace().before(pair.getSecond()); // 閉じ括弧の直前は詰める
		}
		for (Pair<Keyword, Keyword> pair : f.findKeywordPairs("{", "}")) {
			c.setIndentation(pair.getFirst(), pair.getSecond());

			c.setLinewrap().after(pair.getFirst()); // 開き括弧の後は改行する
		}

		// package
		c.setLinewrap(2).after(f.getPackageDeclareRule());

		// import
		c.setLinewrap().after(f.getImportDeclareRule());
		c.setLinewrap(2).between(f.getImportDeclareRule(), f.getOperatorDeclareRule());

		// operator
		c.setLinewrap().after(f.getOperatorDeclareRule());
		c.setLinewrap(2).between(f.getOperatorDeclareRule(), f.getFlowDslRule());

		// Flow DSL
		c.setLinewrap().after(f.getFlowDslAccess().getCommentAssignment_0());
		c.setLinewrap().after(f.getFlowParameterRule());
		c.setLinewrap().after(f.getFlowStatementRule());
		c.setLinewrap(2, 2, 2).after(f.getFlowDslRule());

		// Comment
		c.setLinewrap(0, 1, 2).before(f.getSL_COMMENTRule());
		c.setLinewrap(0, 1, 2).before(f.getML_COMMENTRule());
		c.setLinewrap(0, 1, 1).after(f.getML_COMMENTRule());
	}
}
