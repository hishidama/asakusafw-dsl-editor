/*
 * generated by Xtext
 */
package jp.hishidama.xtext.afw.batch_dsl.generator;

import jp.hishidama.xtext.afw.batch_dsl.batchDsl.BatchDsl;
import jp.hishidama.xtext.afw.batch_dsl.batchDsl.BatchParameter;
import jp.hishidama.xtext.afw.batch_dsl.batchDsl.BatchStatement;
import jp.hishidama.xtext.afw.batch_dsl.batchDsl.ImportDeclare;
import jp.hishidama.xtext.afw.batch_dsl.batchDsl.PackageDeclare;
import jp.hishidama.xtext.afw.batch_dsl.batchDsl.Script;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
public class BatchDslGenerator implements IGenerator {

	// http://christiandietrich.wordpress.com/tag/xtext/

	public void doGenerate(Resource resource, IFileSystemAccess fsa) {
		EList<EObject> list = resource.getContents();
		String packageName = getPackageName(list);
		if (packageName == null) {
			return;
		}

		String path = packageName.replace('.', '/') + "/";

		EList<ImportDeclare> imports = getImport(list);
		generate(fsa, list, path, packageName, imports);
	}

	private String getPackageName(EList<EObject> list) {
		for (EObject object : list) {
			Script script = (Script) object;
			PackageDeclare p = script.getPackage();
			if (p != null) {
				return p.getName();
			}
		}
		return null;
	}

	private EList<ImportDeclare> getImport(EList<EObject> list) {
		for (EObject object : list) {
			Script script = (Script) object;
			return script.getImports();
		}
		return null;
	}

	private void generate(IFileSystemAccess fsa, EList<EObject> list, String path, String packageName,
			EList<ImportDeclare> imports) {
		for (EObject object : list) {
			Script script = (Script) object;
			for (BatchDsl dsl : script.getList()) {
				generate(fsa, dsl, path, packageName, imports);
			}
		}
	}

	private void generate(IFileSystemAccess fsa, BatchDsl dsl, String path, String packageName,
			EList<ImportDeclare> imports) {
		String batchName = dsl.getName();
		if (batchName == null) {
			return;
		}
		String fileName = path + batchName + ".java";

		StringBuilder sb = new StringBuilder(1024);
		sb.append("package ");
		sb.append(packageName);
		sb.append(";\n\n");

		if (imports != null) {
			for (ImportDeclare imp : imports) {
				String iname = imp.getName();
				if (iname != null) {
					sb.append("import ");
					sb.append(iname);
					if (imp.isWildcard()) {
						sb.append(".*");
					}
					sb.append(";\n");
				}
			}
			sb.append("\n");
		}
		sb.append("import com.asakusafw.vocabulary.batch.*;\n");
		sb.append("import com.asakusafw.vocabulary.batch.Batch.*;\n\n");

		String comment = dsl.getComment();
		if (comment != null) {
			sb.append("/**\n");
			sb.append(" * ");
			sb.append(comment);
			sb.append("\n */\n");
		}

		sb.append("@Batch(\n  name = \"");
		sb.append(batchName);
		sb.append("\"");
		if (comment != null) {
			sb.append(",\n  comment = \"");
			sb.append(comment);
			sb.append("\"");
		}
		EList<BatchParameter> params = dsl.getParams();
		if (params != null) {
			sb.append(",\n  parameters = {\n");
			for (BatchParameter param : params) {
				sb.append("    @Parameter(key = \"");
				sb.append(param.getName());
				sb.append("\"");
				if (param.getComment() != null) {
					sb.append(", comment = \"");
					sb.append(param.getComment());
					sb.append("\"");
				}
				if (param.getPattern() != null) {
					sb.append(", pattern = \"");
					sb.append(param.getPattern());
					sb.append("\"");
				}
				sb.append(", required = ");
				sb.append(param.isRequired());
				sb.append(")");
			}
			sb.append("\n  }\n");
		}
		sb.append(")\n");

		sb.append("public class ");
		sb.append(batchName);
		sb.append(" extends BatchDescription {\n\n");
		sb.append("    @Override\n");
		sb.append("    protected void describe() {\n");
		for (BatchStatement statement : dsl.getStatements()) {
			generateDescribe(sb, statement);
		}
		sb.append("    }\n");
		sb.append("}");

		fsa.generateFile(fileName, sb);
	}

	private void generateDescribe(StringBuilder sb, BatchStatement statement) {
		sb.append("        Work ");
		sb.append(statement.getName());
		sb.append(" = run(");
		sb.append(jobClassName(statement));
		sb.append(".class)");
		if (statement.isSoon()) {
			sb.append(".soon()");
		} else {
			sb.append(".after(");
			boolean first = true;
			for (BatchStatement ref : statement.getAfter()) {
				if (first) {
					first = false;
				} else {
					first = true;
					sb.append(", ");
				}
				sb.append(ref.getName());
			}
			sb.append(")");
		}
		sb.append(";\n");
	}

	private String jobClassName(BatchStatement statement) {
		if (statement.getJobName() != null) {
			return statement.getJobName();
		}
		return statement.getName();
	}
}
