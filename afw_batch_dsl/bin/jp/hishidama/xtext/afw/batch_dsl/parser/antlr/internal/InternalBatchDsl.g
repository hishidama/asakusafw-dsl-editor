/*
* generated by Xtext
*/
grammar InternalBatchDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package jp.hishidama.xtext.afw.batch_dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package jp.hishidama.xtext.afw.batch_dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import jp.hishidama.xtext.afw.batch_dsl.services.BatchDslGrammarAccess;

}

@parser::members {

 	private BatchDslGrammarAccess grammarAccess;
 	
    public InternalBatchDslParser(TokenStream input, BatchDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Script";	
   	}
   	
   	@Override
   	protected BatchDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleScript
entryRuleScript returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScriptRule()); }
	 iv_ruleScript=ruleScript 
	 { $current=$iv_ruleScript.current; } 
	 EOF 
;

// Rule Script
ruleScript returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getScriptAccess().getPackagePackageDeclareParserRuleCall_0_0()); 
	    }
		lv_package_0_0=rulePackageDeclare		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptRule());
	        }
       		set(
       			$current, 
       			"package",
        		lv_package_0_0, 
        		"PackageDeclare");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptAccess().getImportsImportDeclareParserRuleCall_1_0()); 
	    }
		lv_imports_1_0=ruleImportDeclare		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_1_0, 
        		"ImportDeclare");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptAccess().getListBatchDslParserRuleCall_2_0()); 
	    }
		lv_list_2_0=ruleBatchDsl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptRule());
	        }
       		add(
       			$current, 
       			"list",
        		lv_list_2_0, 
        		"BatchDsl");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRulePackageDeclare
entryRulePackageDeclare returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageDeclareRule()); }
	 iv_rulePackageDeclare=rulePackageDeclare 
	 { $current=$iv_rulePackageDeclare.current; } 
	 EOF 
;

// Rule PackageDeclare
rulePackageDeclare returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageDeclareAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclareAccess().getNameFQNParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclareRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPackageDeclareAccess().getSemicolonKeyword_2());
    }
)?)
;





// Entry rule entryRuleImportDeclare
entryRuleImportDeclare returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportDeclareRule()); }
	 iv_ruleImportDeclare=ruleImportDeclare 
	 { $current=$iv_ruleImportDeclare.current; } 
	 EOF 
;

// Rule ImportDeclare
ruleImportDeclare returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportDeclareAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportDeclareAccess().getNameFQNParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportDeclareRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImportDeclareAccess().getFullStopKeyword_2_0());
    }
(
(
		lv_wildcard_3_0=	'*' 
    {
        newLeafNode(lv_wildcard_3_0, grammarAccess.getImportDeclareAccess().getWildcardAsteriskKeyword_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportDeclareRule());
	        }
       		setWithLastConsumed($current, "wildcard", true, "*");
	    }

)
))?(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getImportDeclareAccess().getSemicolonKeyword_3());
    }
)?)
;





// Entry rule entryRuleBatchDsl
entryRuleBatchDsl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBatchDslRule()); }
	 iv_ruleBatchDsl=ruleBatchDsl 
	 { $current=$iv_ruleBatchDsl.current; } 
	 EOF 
;

// Rule BatchDsl
ruleBatchDsl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_comment_0_0=RULE_STRING
		{
			newLeafNode(lv_comment_0_0, grammarAccess.getBatchDslAccess().getCommentSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBatchDslRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"STRING");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getBatchDslAccess().getParamsBatchParameterParserRuleCall_1_0()); 
	    }
		lv_params_1_0=ruleBatchParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBatchDslRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_1_0, 
        		"BatchParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='batch' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBatchDslAccess().getBatchKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBatchDslAccess().getNameNameParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBatchDslRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBatchDslAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBatchDslAccess().getStatementsBatchStatementParserRuleCall_5_0()); 
	    }
		lv_statements_5_0=ruleBatchStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBatchDslRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_5_0, 
        		"BatchStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBatchDslAccess().getRightCurlyBracketKeyword_6());
    }
(	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getBatchDslAccess().getSemicolonKeyword_7());
    }
)?)
;





// Entry rule entryRuleBatchParameter
entryRuleBatchParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBatchParameterRule()); }
	 iv_ruleBatchParameter=ruleBatchParameter 
	 { $current=$iv_ruleBatchParameter.current; } 
	 EOF 
;

// Rule BatchParameter
ruleBatchParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@param' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBatchParameterAccess().getParamKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBatchParameterAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_comment_2_0=RULE_STRING
		{
			newLeafNode(lv_comment_2_0, grammarAccess.getBatchParameterAccess().getCommentSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBatchParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_2_0, 
        		"STRING");
	    }

)
)?(	otherlv_3='key' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBatchParameterAccess().getKeyKeyword_3_0());
    }
	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBatchParameterAccess().getEqualsSignKeyword_3_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getBatchParameterAccess().getNameNameParserRuleCall_4_0()); 
	    }
		lv_name_5_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBatchParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBatchParameterAccess().getCommaKeyword_5_0());
    }
)?	otherlv_7='pattern' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getBatchParameterAccess().getPatternKeyword_5_1());
    }
	otherlv_8='=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getBatchParameterAccess().getEqualsSignKeyword_5_2());
    }
(
(
		lv_pattern_9_0=RULE_STRING
		{
			newLeafNode(lv_pattern_9_0, grammarAccess.getBatchParameterAccess().getPatternSTRINGTerminalRuleCall_5_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBatchParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"pattern",
        		lv_pattern_9_0, 
        		"STRING");
	    }

)
))?((	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getBatchParameterAccess().getCommaKeyword_6_0());
    }
)?(
(
		lv_required_11_0=	'required' 
    {
        newLeafNode(lv_required_11_0, grammarAccess.getBatchParameterAccess().getRequiredRequiredKeyword_6_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBatchParameterRule());
	        }
       		setWithLastConsumed($current, "required", true, "required");
	    }

)
))?	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getBatchParameterAccess().getRightParenthesisKeyword_7());
    }
)
;





// Entry rule entryRuleBatchStatement
entryRuleBatchStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBatchStatementRule()); }
	 iv_ruleBatchStatement=ruleBatchStatement 
	 { $current=$iv_ruleBatchStatement.current; } 
	 EOF 
;

// Rule BatchStatement
ruleBatchStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='run' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBatchStatementAccess().getRunKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBatchStatementAccess().getNameFQNParserRuleCall_1_0_0()); 
	    }
		lv_name_1_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBatchStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getBatchStatementAccess().getJobNameFQNParserRuleCall_1_1_0_0()); 
	    }
		lv_jobName_2_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBatchStatementRule());
	        }
       		set(
       			$current, 
       			"jobName",
        		lv_jobName_2_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='as' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBatchStatementAccess().getAsKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBatchStatementAccess().getNameNameParserRuleCall_1_1_2_0()); 
	    }
		lv_name_4_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBatchStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)))((
(
		lv_soon_5_0=	'soon' 
    {
        newLeafNode(lv_soon_5_0, grammarAccess.getBatchStatementAccess().getSoonSoonKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBatchStatementRule());
	        }
       		setWithLastConsumed($current, "soon", true, "soon");
	    }

)
)
    |(	otherlv_6='after' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBatchStatementAccess().getAfterKeyword_2_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBatchStatementRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getBatchStatementAccess().getAfterBatchStatementCrossReference_2_1_1_0()); 
	}

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getBatchStatementAccess().getCommaKeyword_2_1_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBatchStatementRule());
	        }
        }
	otherlv_9=RULE_ID
	{
		newLeafNode(otherlv_9, grammarAccess.getBatchStatementAccess().getAfterBatchStatementCrossReference_2_1_2_1_0()); 
	}

)
))*))(	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getBatchStatementAccess().getSemicolonKeyword_3_0());
    }

    |	otherlv_11='.' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getBatchStatementAccess().getFullStopKeyword_3_1());
    }
)?)
;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQNRule()); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFQNAccess().getNameParserRuleCall_0()); 
    }
    this_Name_0=ruleName    {
		$current.merge(this_Name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFQNAccess().getNameParserRuleCall_1_1()); 
    }
    this_Name_2=ruleName    {
		$current.merge(this_Name_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleName
entryRuleName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameRule()); } 
	 iv_ruleName=ruleName 
	 { $current=$iv_ruleName.current.getText(); }  
	 EOF 
;

// Rule Name
ruleName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getNameAccess().getIDTerminalRuleCall_0()); 
    }

    |
	kw='batch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getBatchKeyword_1()); 
    }

    |
	kw='key' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getKeyKeyword_2()); 
    }

    |
	kw='pattern' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getPatternKeyword_3()); 
    }

    |
	kw='required' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getRequiredKeyword_4()); 
    }

    |
	kw='run' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getRunKeyword_5()); 
    }

    |
	kw='as' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getAsKeyword_6()); 
    }

    |
	kw='soon' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getSoonKeyword_7()); 
    }

    |
	kw='after' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameAccess().getAfterKeyword_8()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : ('//'|'--') ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


