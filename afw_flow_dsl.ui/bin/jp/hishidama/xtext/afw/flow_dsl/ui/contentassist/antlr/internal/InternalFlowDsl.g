/*
* generated by Xtext
*/
grammar InternalFlowDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package jp.hishidama.xtext.afw.flow_dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package jp.hishidama.xtext.afw.flow_dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import jp.hishidama.xtext.afw.flow_dsl.services.FlowDslGrammarAccess;

}

@parser::members {
 
 	private FlowDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(FlowDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleScript
entryRuleScript 
:
{ before(grammarAccess.getScriptRule()); }
	 ruleScript
{ after(grammarAccess.getScriptRule()); } 
	 EOF 
;

// Rule Script
ruleScript
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getScriptAccess().getGroup()); }
(rule__Script__Group__0)
{ after(grammarAccess.getScriptAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackageDeclare
entryRulePackageDeclare 
:
{ before(grammarAccess.getPackageDeclareRule()); }
	 rulePackageDeclare
{ after(grammarAccess.getPackageDeclareRule()); } 
	 EOF 
;

// Rule PackageDeclare
rulePackageDeclare
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageDeclareAccess().getGroup()); }
(rule__PackageDeclare__Group__0)
{ after(grammarAccess.getPackageDeclareAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImportDeclare
entryRuleImportDeclare 
:
{ before(grammarAccess.getImportDeclareRule()); }
	 ruleImportDeclare
{ after(grammarAccess.getImportDeclareRule()); } 
	 EOF 
;

// Rule ImportDeclare
ruleImportDeclare
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportDeclareAccess().getGroup()); }
(rule__ImportDeclare__Group__0)
{ after(grammarAccess.getImportDeclareAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperatorDeclare
entryRuleOperatorDeclare 
:
{ before(grammarAccess.getOperatorDeclareRule()); }
	 ruleOperatorDeclare
{ after(grammarAccess.getOperatorDeclareRule()); } 
	 EOF 
;

// Rule OperatorDeclare
ruleOperatorDeclare
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperatorDeclareAccess().getGroup()); }
(rule__OperatorDeclare__Group__0)
{ after(grammarAccess.getOperatorDeclareAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFlowDsl
entryRuleFlowDsl 
:
{ before(grammarAccess.getFlowDslRule()); }
	 ruleFlowDsl
{ after(grammarAccess.getFlowDslRule()); } 
	 EOF 
;

// Rule FlowDsl
ruleFlowDsl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFlowDslAccess().getGroup()); }
(rule__FlowDsl__Group__0)
{ after(grammarAccess.getFlowDslAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFlowParameter
entryRuleFlowParameter 
:
{ before(grammarAccess.getFlowParameterRule()); }
	 ruleFlowParameter
{ after(grammarAccess.getFlowParameterRule()); } 
	 EOF 
;

// Rule FlowParameter
ruleFlowParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFlowParameterAccess().getAlternatives()); }
(rule__FlowParameter__Alternatives)
{ after(grammarAccess.getFlowParameterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFlowIn
entryRuleFlowIn 
:
{ before(grammarAccess.getFlowInRule()); }
	 ruleFlowIn
{ after(grammarAccess.getFlowInRule()); } 
	 EOF 
;

// Rule FlowIn
ruleFlowIn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFlowInAccess().getGroup()); }
(rule__FlowIn__Group__0)
{ after(grammarAccess.getFlowInAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFlowOut
entryRuleFlowOut 
:
{ before(grammarAccess.getFlowOutRule()); }
	 ruleFlowOut
{ after(grammarAccess.getFlowOutRule()); } 
	 EOF 
;

// Rule FlowOut
ruleFlowOut
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFlowOutAccess().getGroup()); }
(rule__FlowOut__Group__0)
{ after(grammarAccess.getFlowOutAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFlowStatement
entryRuleFlowStatement 
:
{ before(grammarAccess.getFlowStatementRule()); }
	 ruleFlowStatement
{ after(grammarAccess.getFlowStatementRule()); } 
	 EOF 
;

// Rule FlowStatement
ruleFlowStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFlowStatementAccess().getAlternatives()); }
(rule__FlowStatement__Alternatives)
{ after(grammarAccess.getFlowStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFlowStatement1
entryRuleFlowStatement1 
:
{ before(grammarAccess.getFlowStatement1Rule()); }
	 ruleFlowStatement1
{ after(grammarAccess.getFlowStatement1Rule()); } 
	 EOF 
;

// Rule FlowStatement1
ruleFlowStatement1
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFlowStatement1Access().getGroup()); }
(rule__FlowStatement1__Group__0)
{ after(grammarAccess.getFlowStatement1Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFlowStatement2
entryRuleFlowStatement2 
:
{ before(grammarAccess.getFlowStatement2Rule()); }
	 ruleFlowStatement2
{ after(grammarAccess.getFlowStatement2Rule()); } 
	 EOF 
;

// Rule FlowStatement2
ruleFlowStatement2
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFlowStatement2Access().getGroup()); }
(rule__FlowStatement2__Group__0)
{ after(grammarAccess.getFlowStatement2Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperatorArgument
entryRuleOperatorArgument 
:
{ before(grammarAccess.getOperatorArgumentRule()); }
	 ruleOperatorArgument
{ after(grammarAccess.getOperatorArgumentRule()); } 
	 EOF 
;

// Rule OperatorArgument
ruleOperatorArgument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperatorArgumentAccess().getAlternatives()); }
(rule__OperatorArgument__Alternatives)
{ after(grammarAccess.getOperatorArgumentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFQN
entryRuleFQN 
:
{ before(grammarAccess.getFQNRule()); }
	 ruleFQN
{ after(grammarAccess.getFQNRule()); } 
	 EOF 
;

// Rule FQN
ruleFQN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFQNAccess().getGroup()); }
(rule__FQN__Group__0)
{ after(grammarAccess.getFQNAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleName
entryRuleName 
:
{ before(grammarAccess.getNameRule()); }
	 ruleName
{ after(grammarAccess.getNameRule()); } 
	 EOF 
;

// Rule Name
ruleName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNameAccess().getAlternatives()); }
(rule__Name__Alternatives)
{ after(grammarAccess.getNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__FlowParameter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowParameterAccess().getInAssignment_0()); }
(rule__FlowParameter__InAssignment_0)
{ after(grammarAccess.getFlowParameterAccess().getInAssignment_0()); }
)

    |(
{ before(grammarAccess.getFlowParameterAccess().getOutAssignment_1()); }
(rule__FlowParameter__OutAssignment_1)
{ after(grammarAccess.getFlowParameterAccess().getOutAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowIn__Alternatives_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowInAccess().getSemicolonKeyword_5_0()); }

	';' 

{ after(grammarAccess.getFlowInAccess().getSemicolonKeyword_5_0()); }
)

    |(
{ before(grammarAccess.getFlowInAccess().getFullStopKeyword_5_1()); }

	'.' 

{ after(grammarAccess.getFlowInAccess().getFullStopKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowOut__Alternatives_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowOutAccess().getSemicolonKeyword_5_0()); }

	';' 

{ after(grammarAccess.getFlowOutAccess().getSemicolonKeyword_5_0()); }
)

    |(
{ before(grammarAccess.getFlowOutAccess().getFullStopKeyword_5_1()); }

	'.' 

{ after(grammarAccess.getFlowOutAccess().getFullStopKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatementAccess().getFlowStatement1ParserRuleCall_0()); }
	ruleFlowStatement1
{ after(grammarAccess.getFlowStatementAccess().getFlowStatement1ParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFlowStatementAccess().getFlowStatement2ParserRuleCall_1()); }
	ruleFlowStatement2
{ after(grammarAccess.getFlowStatementAccess().getFlowStatement2ParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__Alternatives_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getSemicolonKeyword_7_0()); }

	';' 

{ after(grammarAccess.getFlowStatement1Access().getSemicolonKeyword_7_0()); }
)

    |(
{ before(grammarAccess.getFlowStatement1Access().getFullStopKeyword_7_1()); }

	'.' 

{ after(grammarAccess.getFlowStatement1Access().getFullStopKeyword_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement2__Alternatives_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement2Access().getSemicolonKeyword_5_0()); }

	';' 

{ after(grammarAccess.getFlowStatement2Access().getSemicolonKeyword_5_0()); }
)

    |(
{ before(grammarAccess.getFlowStatement2Access().getFullStopKeyword_5_1()); }

	'.' 

{ after(grammarAccess.getFlowStatement2Access().getFullStopKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorArgument__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorArgumentAccess().getGroup_0()); }
(rule__OperatorArgument__Group_0__0)
{ after(grammarAccess.getOperatorArgumentAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getOperatorArgumentAccess().getInAssignment_1()); }
(rule__OperatorArgument__InAssignment_1)
{ after(grammarAccess.getOperatorArgumentAccess().getInAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getNameAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNameAccess().getOperatorKeyword_1()); }

	'operator' 

{ after(grammarAccess.getNameAccess().getOperatorKeyword_1()); }
)

    |(
{ before(grammarAccess.getNameAccess().getJobflowKeyword_2()); }

	'jobflow' 

{ after(grammarAccess.getNameAccess().getJobflowKeyword_2()); }
)

    |(
{ before(grammarAccess.getNameAccess().getInKeyword_3()); }

	'in' 

{ after(grammarAccess.getNameAccess().getInKeyword_3()); }
)

    |(
{ before(grammarAccess.getNameAccess().getOutKeyword_4()); }

	'out' 

{ after(grammarAccess.getNameAccess().getOutKeyword_4()); }
)

    |(
{ before(grammarAccess.getNameAccess().getAsKeyword_5()); }

	'as' 

{ after(grammarAccess.getNameAccess().getAsKeyword_5()); }
)

    |(
{ before(grammarAccess.getNameAccess().getImporterKeyword_6()); }

	'importer' 

{ after(grammarAccess.getNameAccess().getImporterKeyword_6()); }
)

    |(
{ before(grammarAccess.getNameAccess().getExporterKeyword_7()); }

	'exporter' 

{ after(grammarAccess.getNameAccess().getExporterKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Script__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group__0__Impl
	rule__Script__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getPackageAssignment_0()); }
(rule__Script__PackageAssignment_0)
{ after(grammarAccess.getScriptAccess().getPackageAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group__1__Impl
	rule__Script__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getImportsAssignment_1()); }
(rule__Script__ImportsAssignment_1)*
{ after(grammarAccess.getScriptAccess().getImportsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group__2__Impl
	rule__Script__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getOperatorsAssignment_2()); }
(rule__Script__OperatorsAssignment_2)*
{ after(grammarAccess.getScriptAccess().getOperatorsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Script__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Script__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getListAssignment_3()); }
(rule__Script__ListAssignment_3)*
{ after(grammarAccess.getScriptAccess().getListAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__PackageDeclare__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclare__Group__0__Impl
	rule__PackageDeclare__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclare__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclareAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getPackageDeclareAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclare__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclare__Group__1__Impl
	rule__PackageDeclare__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclare__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclareAccess().getNameAssignment_1()); }
(rule__PackageDeclare__NameAssignment_1)
{ after(grammarAccess.getPackageDeclareAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclare__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclare__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclare__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclareAccess().getSemicolonKeyword_2()); }
(
	';' 
)?
{ after(grammarAccess.getPackageDeclareAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ImportDeclare__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportDeclare__Group__0__Impl
	rule__ImportDeclare__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclare__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclareAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportDeclareAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportDeclare__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportDeclare__Group__1__Impl
	rule__ImportDeclare__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclare__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclareAccess().getNameAssignment_1()); }
(rule__ImportDeclare__NameAssignment_1)
{ after(grammarAccess.getImportDeclareAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportDeclare__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportDeclare__Group__2__Impl
	rule__ImportDeclare__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclare__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclareAccess().getGroup_2()); }
(rule__ImportDeclare__Group_2__0)?
{ after(grammarAccess.getImportDeclareAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportDeclare__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportDeclare__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclare__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclareAccess().getSemicolonKeyword_3()); }
(
	';' 
)?
{ after(grammarAccess.getImportDeclareAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ImportDeclare__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportDeclare__Group_2__0__Impl
	rule__ImportDeclare__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclare__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclareAccess().getFullStopKeyword_2_0()); }

	'.' 

{ after(grammarAccess.getImportDeclareAccess().getFullStopKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportDeclare__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportDeclare__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclare__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclareAccess().getWildcardAssignment_2_1()); }
(rule__ImportDeclare__WildcardAssignment_2_1)
{ after(grammarAccess.getImportDeclareAccess().getWildcardAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperatorDeclare__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorDeclare__Group__0__Impl
	rule__OperatorDeclare__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorDeclare__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorDeclareAccess().getOperatorKeyword_0()); }

	'operator' 

{ after(grammarAccess.getOperatorDeclareAccess().getOperatorKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorDeclare__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorDeclare__Group__1__Impl
	rule__OperatorDeclare__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorDeclare__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorDeclareAccess().getOperatorAssignment_1()); }
(rule__OperatorDeclare__OperatorAssignment_1)
{ after(grammarAccess.getOperatorDeclareAccess().getOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorDeclare__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorDeclare__Group__2__Impl
	rule__OperatorDeclare__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorDeclare__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorDeclareAccess().getAsKeyword_2()); }

	'as' 

{ after(grammarAccess.getOperatorDeclareAccess().getAsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorDeclare__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorDeclare__Group__3__Impl
	rule__OperatorDeclare__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorDeclare__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorDeclareAccess().getNameAssignment_3()); }
(rule__OperatorDeclare__NameAssignment_3)
{ after(grammarAccess.getOperatorDeclareAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorDeclare__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorDeclare__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorDeclare__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorDeclareAccess().getSemicolonKeyword_4()); }
(
	';' 
)?
{ after(grammarAccess.getOperatorDeclareAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FlowDsl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDsl__Group__0__Impl
	rule__FlowDsl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDsl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDslAccess().getCommentAssignment_0()); }
(rule__FlowDsl__CommentAssignment_0)?
{ after(grammarAccess.getFlowDslAccess().getCommentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDsl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDsl__Group__1__Impl
	rule__FlowDsl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDsl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDslAccess().getJobflowKeyword_1()); }

	'jobflow' 

{ after(grammarAccess.getFlowDslAccess().getJobflowKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDsl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDsl__Group__2__Impl
	rule__FlowDsl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDsl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDslAccess().getNameAssignment_2()); }
(rule__FlowDsl__NameAssignment_2)
{ after(grammarAccess.getFlowDslAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDsl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDsl__Group__3__Impl
	rule__FlowDsl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDsl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDslAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getFlowDslAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDsl__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDsl__Group__4__Impl
	rule__FlowDsl__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDsl__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getFlowDslAccess().getParamsAssignment_4()); }
(rule__FlowDsl__ParamsAssignment_4)
{ after(grammarAccess.getFlowDslAccess().getParamsAssignment_4()); }
)
(
{ before(grammarAccess.getFlowDslAccess().getParamsAssignment_4()); }
(rule__FlowDsl__ParamsAssignment_4)*
{ after(grammarAccess.getFlowDslAccess().getParamsAssignment_4()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDsl__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDsl__Group__5__Impl
	rule__FlowDsl__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDsl__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDslAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getFlowDslAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDsl__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDsl__Group__6__Impl
	rule__FlowDsl__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDsl__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDslAccess().getLeftCurlyBracketKeyword_6()); }

	'{' 

{ after(grammarAccess.getFlowDslAccess().getLeftCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDsl__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDsl__Group__7__Impl
	rule__FlowDsl__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDsl__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDslAccess().getStatementsAssignment_7()); }
(rule__FlowDsl__StatementsAssignment_7)*
{ after(grammarAccess.getFlowDslAccess().getStatementsAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDsl__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDsl__Group__8__Impl
	rule__FlowDsl__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDsl__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDslAccess().getRightCurlyBracketKeyword_8()); }

	'}' 

{ after(grammarAccess.getFlowDslAccess().getRightCurlyBracketKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowDsl__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowDsl__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDsl__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDslAccess().getSemicolonKeyword_9()); }
(
	';' 
)?
{ after(grammarAccess.getFlowDslAccess().getSemicolonKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__FlowIn__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowIn__Group__0__Impl
	rule__FlowIn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowIn__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowInAccess().getInoutAssignment_0()); }
(rule__FlowIn__InoutAssignment_0)
{ after(grammarAccess.getFlowInAccess().getInoutAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowIn__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowIn__Group__1__Impl
	rule__FlowIn__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowIn__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowInAccess().getModelAssignment_1()); }
(rule__FlowIn__ModelAssignment_1)
{ after(grammarAccess.getFlowInAccess().getModelAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowIn__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowIn__Group__2__Impl
	rule__FlowIn__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowIn__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowInAccess().getAsKeyword_2()); }

	'as' 

{ after(grammarAccess.getFlowInAccess().getAsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowIn__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowIn__Group__3__Impl
	rule__FlowIn__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowIn__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowInAccess().getNameAssignment_3()); }
(rule__FlowIn__NameAssignment_3)
{ after(grammarAccess.getFlowInAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowIn__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowIn__Group__4__Impl
	rule__FlowIn__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowIn__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowInAccess().getGroup_4()); }
(rule__FlowIn__Group_4__0)?
{ after(grammarAccess.getFlowInAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowIn__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowIn__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowIn__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowInAccess().getAlternatives_5()); }
(rule__FlowIn__Alternatives_5)?
{ after(grammarAccess.getFlowInAccess().getAlternatives_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__FlowIn__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowIn__Group_4__0__Impl
	rule__FlowIn__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowIn__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowInAccess().getCommaKeyword_4_0()); }
(
	',' 
)?
{ after(grammarAccess.getFlowInAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowIn__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowIn__Group_4__1__Impl
	rule__FlowIn__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowIn__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowInAccess().getImporterKeyword_4_1()); }

	'importer' 

{ after(grammarAccess.getFlowInAccess().getImporterKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowIn__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowIn__Group_4__2__Impl
	rule__FlowIn__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowIn__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowInAccess().getImporterDescriptionAssignment_4_2()); }
(rule__FlowIn__ImporterDescriptionAssignment_4_2)
{ after(grammarAccess.getFlowInAccess().getImporterDescriptionAssignment_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowIn__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowIn__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowIn__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowInAccess().getGroup_4_3()); }
(rule__FlowIn__Group_4_3__0)?
{ after(grammarAccess.getFlowInAccess().getGroup_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FlowIn__Group_4_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowIn__Group_4_3__0__Impl
	rule__FlowIn__Group_4_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowIn__Group_4_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowInAccess().getAsKeyword_4_3_0()); }

	'as' 

{ after(grammarAccess.getFlowInAccess().getAsKeyword_4_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowIn__Group_4_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowIn__Group_4_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowIn__Group_4_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowInAccess().getImporterNameAssignment_4_3_1()); }
(rule__FlowIn__ImporterNameAssignment_4_3_1)
{ after(grammarAccess.getFlowInAccess().getImporterNameAssignment_4_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FlowOut__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowOut__Group__0__Impl
	rule__FlowOut__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowOut__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowOutAccess().getInoutAssignment_0()); }
(rule__FlowOut__InoutAssignment_0)
{ after(grammarAccess.getFlowOutAccess().getInoutAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowOut__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowOut__Group__1__Impl
	rule__FlowOut__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowOut__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowOutAccess().getModelAssignment_1()); }
(rule__FlowOut__ModelAssignment_1)
{ after(grammarAccess.getFlowOutAccess().getModelAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowOut__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowOut__Group__2__Impl
	rule__FlowOut__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowOut__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowOutAccess().getAsKeyword_2()); }

	'as' 

{ after(grammarAccess.getFlowOutAccess().getAsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowOut__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowOut__Group__3__Impl
	rule__FlowOut__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowOut__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowOutAccess().getNameAssignment_3()); }
(rule__FlowOut__NameAssignment_3)
{ after(grammarAccess.getFlowOutAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowOut__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowOut__Group__4__Impl
	rule__FlowOut__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowOut__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowOutAccess().getGroup_4()); }
(rule__FlowOut__Group_4__0)?
{ after(grammarAccess.getFlowOutAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowOut__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowOut__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowOut__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowOutAccess().getAlternatives_5()); }
(rule__FlowOut__Alternatives_5)?
{ after(grammarAccess.getFlowOutAccess().getAlternatives_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__FlowOut__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowOut__Group_4__0__Impl
	rule__FlowOut__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowOut__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowOutAccess().getCommaKeyword_4_0()); }
(
	',' 
)?
{ after(grammarAccess.getFlowOutAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowOut__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowOut__Group_4__1__Impl
	rule__FlowOut__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowOut__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowOutAccess().getExporterKeyword_4_1()); }

	'exporter' 

{ after(grammarAccess.getFlowOutAccess().getExporterKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowOut__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowOut__Group_4__2__Impl
	rule__FlowOut__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowOut__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowOutAccess().getExporterDescriptionAssignment_4_2()); }
(rule__FlowOut__ExporterDescriptionAssignment_4_2)
{ after(grammarAccess.getFlowOutAccess().getExporterDescriptionAssignment_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowOut__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowOut__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowOut__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowOutAccess().getGroup_4_3()); }
(rule__FlowOut__Group_4_3__0)?
{ after(grammarAccess.getFlowOutAccess().getGroup_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FlowOut__Group_4_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowOut__Group_4_3__0__Impl
	rule__FlowOut__Group_4_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowOut__Group_4_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowOutAccess().getAsKeyword_4_3_0()); }

	'as' 

{ after(grammarAccess.getFlowOutAccess().getAsKeyword_4_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowOut__Group_4_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowOut__Group_4_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowOut__Group_4_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowOutAccess().getExporterNameAssignment_4_3_1()); }
(rule__FlowOut__ExporterNameAssignment_4_3_1)
{ after(grammarAccess.getFlowOutAccess().getExporterNameAssignment_4_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FlowStatement1__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement1__Group__0__Impl
	rule__FlowStatement1__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getGroup_0()); }
(rule__FlowStatement1__Group_0__0)?
{ after(grammarAccess.getFlowStatement1Access().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowStatement1__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement1__Group__1__Impl
	rule__FlowStatement1__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getOperatorAssignment_1()); }
(rule__FlowStatement1__OperatorAssignment_1)
{ after(grammarAccess.getFlowStatement1Access().getOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowStatement1__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement1__Group__2__Impl
	rule__FlowStatement1__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getFlowStatement1Access().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowStatement1__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement1__Group__3__Impl
	rule__FlowStatement1__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getMethodAssignment_3()); }
(rule__FlowStatement1__MethodAssignment_3)
{ after(grammarAccess.getFlowStatement1Access().getMethodAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowStatement1__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement1__Group__4__Impl
	rule__FlowStatement1__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getLeftParenthesisKeyword_4()); }

	'(' 

{ after(grammarAccess.getFlowStatement1Access().getLeftParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowStatement1__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement1__Group__5__Impl
	rule__FlowStatement1__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getGroup_5()); }
(rule__FlowStatement1__Group_5__0)?
{ after(grammarAccess.getFlowStatement1Access().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowStatement1__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement1__Group__6__Impl
	rule__FlowStatement1__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getFlowStatement1Access().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowStatement1__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement1__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getAlternatives_7()); }
(rule__FlowStatement1__Alternatives_7)?
{ after(grammarAccess.getFlowStatement1Access().getAlternatives_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__FlowStatement1__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement1__Group_0__0__Impl
	rule__FlowStatement1__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getNameAssignment_0_0()); }
(rule__FlowStatement1__NameAssignment_0_0)
{ after(grammarAccess.getFlowStatement1Access().getNameAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowStatement1__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement1__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getEqualsSignKeyword_0_1()); }

	'=' 

{ after(grammarAccess.getFlowStatement1Access().getEqualsSignKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FlowStatement1__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement1__Group_5__0__Impl
	rule__FlowStatement1__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getArgumentsAssignment_5_0()); }
(rule__FlowStatement1__ArgumentsAssignment_5_0)
{ after(grammarAccess.getFlowStatement1Access().getArgumentsAssignment_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowStatement1__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement1__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getGroup_5_1()); }
(rule__FlowStatement1__Group_5_1__0)*
{ after(grammarAccess.getFlowStatement1Access().getGroup_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FlowStatement1__Group_5_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement1__Group_5_1__0__Impl
	rule__FlowStatement1__Group_5_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__Group_5_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getCommaKeyword_5_1_0()); }

	',' 

{ after(grammarAccess.getFlowStatement1Access().getCommaKeyword_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowStatement1__Group_5_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement1__Group_5_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__Group_5_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getArgumentsAssignment_5_1_1()); }
(rule__FlowStatement1__ArgumentsAssignment_5_1_1)
{ after(grammarAccess.getFlowStatement1Access().getArgumentsAssignment_5_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FlowStatement2__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement2__Group__0__Impl
	rule__FlowStatement2__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement2__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement2Access().getNameAssignment_0()); }
(rule__FlowStatement2__NameAssignment_0)
{ after(grammarAccess.getFlowStatement2Access().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowStatement2__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement2__Group__1__Impl
	rule__FlowStatement2__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement2__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement2Access().getPlusSignEqualsSignKeyword_1()); }

	'+=' 

{ after(grammarAccess.getFlowStatement2Access().getPlusSignEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowStatement2__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement2__Group__2__Impl
	rule__FlowStatement2__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement2__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement2Access().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getFlowStatement2Access().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowStatement2__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement2__Group__3__Impl
	rule__FlowStatement2__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement2__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement2Access().getGroup_3()); }
(rule__FlowStatement2__Group_3__0)?
{ after(grammarAccess.getFlowStatement2Access().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowStatement2__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement2__Group__4__Impl
	rule__FlowStatement2__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement2__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement2Access().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFlowStatement2Access().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowStatement2__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement2__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement2__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement2Access().getAlternatives_5()); }
(rule__FlowStatement2__Alternatives_5)?
{ after(grammarAccess.getFlowStatement2Access().getAlternatives_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__FlowStatement2__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement2__Group_3__0__Impl
	rule__FlowStatement2__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement2__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement2Access().getArgumentsAssignment_3_0()); }
(rule__FlowStatement2__ArgumentsAssignment_3_0)
{ after(grammarAccess.getFlowStatement2Access().getArgumentsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowStatement2__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement2__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement2__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement2Access().getGroup_3_1()); }
(rule__FlowStatement2__Group_3_1__0)*
{ after(grammarAccess.getFlowStatement2Access().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FlowStatement2__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement2__Group_3_1__0__Impl
	rule__FlowStatement2__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement2__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement2Access().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getFlowStatement2Access().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FlowStatement2__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FlowStatement2__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement2__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement2Access().getArgumentsAssignment_3_1_1()); }
(rule__FlowStatement2__ArgumentsAssignment_3_1_1)
{ after(grammarAccess.getFlowStatement2Access().getArgumentsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperatorArgument__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorArgument__Group_0__0__Impl
	rule__OperatorArgument__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorArgument__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorArgumentAccess().getInAssignment_0_0()); }
(rule__OperatorArgument__InAssignment_0_0)
{ after(grammarAccess.getOperatorArgumentAccess().getInAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorArgument__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorArgument__Group_0__1__Impl
	rule__OperatorArgument__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorArgument__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorArgumentAccess().getFullStopKeyword_0_1()); }

	'.' 

{ after(grammarAccess.getOperatorArgumentAccess().getFullStopKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorArgument__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorArgument__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorArgument__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorArgumentAccess().getNameAssignment_0_2()); }
(rule__OperatorArgument__NameAssignment_0_2)
{ after(grammarAccess.getOperatorArgumentAccess().getNameAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FQN__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group__0__Impl
	rule__FQN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getNameParserRuleCall_0()); }
	ruleName
{ after(grammarAccess.getFQNAccess().getNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getGroup_1()); }
(rule__FQN__Group_1__0)*
{ after(grammarAccess.getFQNAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FQN__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group_1__0__Impl
	rule__FQN__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getNameParserRuleCall_1_1()); }
	ruleName
{ after(grammarAccess.getFQNAccess().getNameParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Script__PackageAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getPackagePackageDeclareParserRuleCall_0_0()); }
	rulePackageDeclare{ after(grammarAccess.getScriptAccess().getPackagePackageDeclareParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Script__ImportsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getImportsImportDeclareParserRuleCall_1_0()); }
	ruleImportDeclare{ after(grammarAccess.getScriptAccess().getImportsImportDeclareParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Script__OperatorsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getOperatorsOperatorDeclareParserRuleCall_2_0()); }
	ruleOperatorDeclare{ after(grammarAccess.getScriptAccess().getOperatorsOperatorDeclareParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Script__ListAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScriptAccess().getListFlowDslParserRuleCall_3_0()); }
	ruleFlowDsl{ after(grammarAccess.getScriptAccess().getListFlowDslParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclare__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclareAccess().getNameFQNParserRuleCall_1_0()); }
	ruleFQN{ after(grammarAccess.getPackageDeclareAccess().getNameFQNParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclare__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclareAccess().getNameFQNParserRuleCall_1_0()); }
	ruleFQN{ after(grammarAccess.getImportDeclareAccess().getNameFQNParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDeclare__WildcardAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportDeclareAccess().getWildcardAsteriskKeyword_2_1_0()); }
(
{ before(grammarAccess.getImportDeclareAccess().getWildcardAsteriskKeyword_2_1_0()); }

	'*' 

{ after(grammarAccess.getImportDeclareAccess().getWildcardAsteriskKeyword_2_1_0()); }
)

{ after(grammarAccess.getImportDeclareAccess().getWildcardAsteriskKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorDeclare__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorDeclareAccess().getOperatorFQNParserRuleCall_1_0()); }
	ruleFQN{ after(grammarAccess.getOperatorDeclareAccess().getOperatorFQNParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorDeclare__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorDeclareAccess().getNameNameParserRuleCall_3_0()); }
	ruleName{ after(grammarAccess.getOperatorDeclareAccess().getNameNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDsl__CommentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDslAccess().getCommentSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getFlowDslAccess().getCommentSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDsl__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDslAccess().getNameNameParserRuleCall_2_0()); }
	ruleName{ after(grammarAccess.getFlowDslAccess().getNameNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDsl__ParamsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDslAccess().getParamsFlowParameterParserRuleCall_4_0()); }
	ruleFlowParameter{ after(grammarAccess.getFlowDslAccess().getParamsFlowParameterParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowDsl__StatementsAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowDslAccess().getStatementsFlowStatementParserRuleCall_7_0()); }
	ruleFlowStatement{ after(grammarAccess.getFlowDslAccess().getStatementsFlowStatementParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowParameter__InAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowParameterAccess().getInFlowInParserRuleCall_0_0()); }
	ruleFlowIn{ after(grammarAccess.getFlowParameterAccess().getInFlowInParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowParameter__OutAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowParameterAccess().getOutFlowOutParserRuleCall_1_0()); }
	ruleFlowOut{ after(grammarAccess.getFlowParameterAccess().getOutFlowOutParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowIn__InoutAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowInAccess().getInoutInKeyword_0_0()); }
(
{ before(grammarAccess.getFlowInAccess().getInoutInKeyword_0_0()); }

	'in' 

{ after(grammarAccess.getFlowInAccess().getInoutInKeyword_0_0()); }
)

{ after(grammarAccess.getFlowInAccess().getInoutInKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowIn__ModelAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowInAccess().getModelNameParserRuleCall_1_0()); }
	ruleName{ after(grammarAccess.getFlowInAccess().getModelNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowIn__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowInAccess().getNameNameParserRuleCall_3_0()); }
	ruleName{ after(grammarAccess.getFlowInAccess().getNameNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowIn__ImporterDescriptionAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowInAccess().getImporterDescriptionFQNParserRuleCall_4_2_0()); }
	ruleFQN{ after(grammarAccess.getFlowInAccess().getImporterDescriptionFQNParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowIn__ImporterNameAssignment_4_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowInAccess().getImporterNameNameParserRuleCall_4_3_1_0()); }
	ruleName{ after(grammarAccess.getFlowInAccess().getImporterNameNameParserRuleCall_4_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowOut__InoutAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowOutAccess().getInoutOutKeyword_0_0()); }
(
{ before(grammarAccess.getFlowOutAccess().getInoutOutKeyword_0_0()); }

	'out' 

{ after(grammarAccess.getFlowOutAccess().getInoutOutKeyword_0_0()); }
)

{ after(grammarAccess.getFlowOutAccess().getInoutOutKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowOut__ModelAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowOutAccess().getModelNameParserRuleCall_1_0()); }
	ruleName{ after(grammarAccess.getFlowOutAccess().getModelNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowOut__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowOutAccess().getNameNameParserRuleCall_3_0()); }
	ruleName{ after(grammarAccess.getFlowOutAccess().getNameNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowOut__ExporterDescriptionAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowOutAccess().getExporterDescriptionFQNParserRuleCall_4_2_0()); }
	ruleFQN{ after(grammarAccess.getFlowOutAccess().getExporterDescriptionFQNParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowOut__ExporterNameAssignment_4_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowOutAccess().getExporterNameNameParserRuleCall_4_3_1_0()); }
	ruleName{ after(grammarAccess.getFlowOutAccess().getExporterNameNameParserRuleCall_4_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__NameAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getNameNameParserRuleCall_0_0_0()); }
	ruleName{ after(grammarAccess.getFlowStatement1Access().getNameNameParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getOperatorOperatorDeclareCrossReference_1_0()); }
(
{ before(grammarAccess.getFlowStatement1Access().getOperatorOperatorDeclareIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getFlowStatement1Access().getOperatorOperatorDeclareIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getFlowStatement1Access().getOperatorOperatorDeclareCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__MethodAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getMethodNameParserRuleCall_3_0()); }
	ruleName{ after(grammarAccess.getFlowStatement1Access().getMethodNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__ArgumentsAssignment_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getArgumentsOperatorArgumentParserRuleCall_5_0_0()); }
	ruleOperatorArgument{ after(grammarAccess.getFlowStatement1Access().getArgumentsOperatorArgumentParserRuleCall_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement1__ArgumentsAssignment_5_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement1Access().getArgumentsOperatorArgumentParserRuleCall_5_1_1_0()); }
	ruleOperatorArgument{ after(grammarAccess.getFlowStatement1Access().getArgumentsOperatorArgumentParserRuleCall_5_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement2__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement2Access().getNameFlowOutCrossReference_0_0()); }
(
{ before(grammarAccess.getFlowStatement2Access().getNameFlowOutIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getFlowStatement2Access().getNameFlowOutIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getFlowStatement2Access().getNameFlowOutCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement2__ArgumentsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement2Access().getArgumentsOperatorArgumentParserRuleCall_3_0_0()); }
	ruleOperatorArgument{ after(grammarAccess.getFlowStatement2Access().getArgumentsOperatorArgumentParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FlowStatement2__ArgumentsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowStatement2Access().getArgumentsOperatorArgumentParserRuleCall_3_1_1_0()); }
	ruleOperatorArgument{ after(grammarAccess.getFlowStatement2Access().getArgumentsOperatorArgumentParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorArgument__InAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorArgumentAccess().getInFlowInCrossReference_0_0_0()); }
(
{ before(grammarAccess.getOperatorArgumentAccess().getInFlowInIDTerminalRuleCall_0_0_0_1()); }
	RULE_ID{ after(grammarAccess.getOperatorArgumentAccess().getInFlowInIDTerminalRuleCall_0_0_0_1()); }
)
{ after(grammarAccess.getOperatorArgumentAccess().getInFlowInCrossReference_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorArgument__NameAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorArgumentAccess().getNameNameParserRuleCall_0_2_0()); }
	ruleName{ after(grammarAccess.getOperatorArgumentAccess().getNameNameParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorArgument__InAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorArgumentAccess().getInFlowStatementCrossReference_1_0()); }
(
{ before(grammarAccess.getOperatorArgumentAccess().getInFlowStatementIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getOperatorArgumentAccess().getInFlowStatementIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getOperatorArgumentAccess().getInFlowStatementCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : ('//'|'--') ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


