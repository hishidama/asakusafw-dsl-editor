/*
 * first generated by Xtext
 */
package jp.hishidama.xtext.afw.flow_dsl.ui.outline;

import jp.hishidama.xtext.afw.flow_dsl.flowDsl.FlowDsl;
import jp.hishidama.xtext.afw.flow_dsl.flowDsl.FlowIn;
import jp.hishidama.xtext.afw.flow_dsl.flowDsl.FlowOut;
import jp.hishidama.xtext.afw.flow_dsl.flowDsl.FlowParameter;
import jp.hishidama.xtext.afw.flow_dsl.flowDsl.FlowStatement;
import jp.hishidama.xtext.afw.flow_dsl.flowDsl.FlowStatement1;
import jp.hishidama.xtext.afw.flow_dsl.flowDsl.FlowStatement2;
import jp.hishidama.xtext.afw.flow_dsl.flowDsl.Script;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jdt.ui.ISharedImages;
import org.eclipse.jdt.ui.JavaUI;
import org.eclipse.swt.graphics.Image;
import org.eclipse.ui.PlatformUI;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;

/**
 * Customization of the default outline structure.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#outline
 */
public class FlowDslOutlineTreeProvider extends DefaultOutlineTreeProvider {

	@Override
	protected void _createChildren(DocumentRootNode parentNode, EObject modelElement) {
		Script script = (Script) modelElement;
		for (EObject childElement : script.getList()) {
			createNode(parentNode, childElement);
		}
	}

	protected void _createChildren(IOutlineNode parentNode, FlowDsl object) {
		for (FlowParameter childElement : object.getParams()) {
			FlowIn in = childElement.getIn();
			if (in != null) {
				createNode(parentNode, in);
			}
			FlowOut out = childElement.getOut();
			if (out != null) {
				createNode(parentNode, out);
			}
		}
		for (FlowStatement childElement : object.getStatements()) {
			createNode(parentNode, childElement);
		}
	}

	/*
	 * isLeaf
	 */

	protected boolean _isLeaf(FlowIn modelElement) {
		return true;
	}

	protected boolean _isLeaf(FlowOut modelElement) {
		return true;
	}

	protected boolean _isLeaf(FlowStatement modelElement) {
		return true;
	}

	/*
	 * text
	 */

	protected Object _text(FlowStatement1 modelElement) {
		String name = modelElement.getName();
		if (name == null) {
			name = "<unname>";
		}
		String op = modelElement.getOperator().getName();
		String method = modelElement.getMethod();
		return String.format("%s : %s.%s", name, op, method);
	}

	protected Object _text(FlowStatement2 modelElement) {
		FlowOut ref = modelElement.getName();
		if (ref != null) {
			return ref.getName();
		}
		return "<unname>";
	}

	/*
	 * image
	 */

	protected Image _image(FlowDsl modelElement) {
		return JavaUI.getSharedImages().getImage(ISharedImages.IMG_OBJS_CLASS);
	}

	protected Image _image(FlowIn modelElement) {
		return PlatformUI.getWorkbench().getSharedImages().getImage(org.eclipse.ui.ISharedImages.IMG_TOOL_REDO);
	}

	protected Image _image(FlowOut modelElement) {
		return PlatformUI.getWorkbench().getSharedImages().getImage(org.eclipse.ui.ISharedImages.IMG_TOOL_UNDO);
	}

	protected Image _image(FlowStatement1 modelElement) {
		return JavaUI.getSharedImages().getImage(ISharedImages.IMG_OBJS_DEFAULT);
	}

	protected Image _image(FlowStatement2 modelElement) {
		return JavaUI.getSharedImages().getImage(ISharedImages.IMG_OBJS_PUBLIC);
	}
}
